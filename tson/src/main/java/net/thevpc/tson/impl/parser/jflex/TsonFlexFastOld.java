/* The following code was generated by JFlex 1.7.0 */
package net.thevpc.tson.impl.parser.jflex;

import net.thevpc.tson.TsonParserTokens;

/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0 from the specification file
 * <tt>tson.flex</tt>
 */
public final class TsonFlexFastOld {

    /**
     * This character denotes the end of file
     */
    public static final int YYEOF = -1;

    /**
     * initial size of the lookahead buffer
     */
    private static final int ZZ_BUFFERSIZE = 16384;

    /**
     * lexical states
     */
    public static final int YYINITIAL = 0;
    public static final int STRING = 2;
    public static final int CHARLITERAL = 4;
    public static final int BASE64 = 6;
    public static final int REGEX = 8;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l at the
     * beginning of a line l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
        0, 0, 1, 1, 2, 2, 3, 3, 4, 4
    };

    /**
     * Translates characters to character classes
     */
    private static final String ZZ_CMAP_PACKED
            = "\12\0\1\40\1\42\1\42\1\41\24\0\1\60\1\0\1\2\1\0"
            + "\1\43\1\61\1\27\1\30\1\37\1\21\1\26\1\22\1\3\1\36"
            + "\1\4\1\7\2\63\4\6\2\1\1\23\5\0\1\35\1\5\1\12"
            + "\1\5\1\17\1\20\1\16\2\2\1\57\2\2\1\10\1\2\1\54"
            + "\4\2\1\14\1\24\3\2\1\13\1\2\1\25\1\31\1\62\1\32"
            + "\1\0\1\2\1\0\1\50\1\15\1\5\1\56\1\51\1\47\5\2"
            + "\1\46\1\2\1\44\1\55\2\2\1\53\1\11\1\52\1\45\2\2"
            + "\1\13\2\2\1\33\1\0\1\34\7\0\1\42\u1fa2\0\1\42\1\42"
            + "\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

    /**
     * Translates characters to character classes
     */
    private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0
            = "\5\0\1\1\1\2\1\3\1\2\2\1\1\4\1\5"
            + "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"
            + "\1\1\4\3\1\16\1\17\1\20\2\21\1\22\2\1"
            + "\2\23\1\0\1\1\1\20\1\24\1\20\1\25\1\1"
            + "\1\2\1\26\1\27\1\30\1\31\3\0\1\32\1\0"
            + "\1\31\5\0\1\33\4\3\1\34\2\35\1\36\1\37"
            + "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\13\34"
            + "\1\2\1\0\1\47\2\26\2\0\1\32\1\50\1\51"
            + "\1\52\1\53\1\54\6\0\3\3\1\55\1\35\1\0"
            + "\1\56\1\0\1\57\1\60\1\61\1\62\1\63\1\64"
            + "\1\65\1\66\1\67\1\2\3\0\1\32\1\70\1\71"
            + "\1\72\1\73\1\74\1\75\1\0\1\76\1\0\1\77"
            + "\1\100\1\101\1\3\1\102\1\2\2\0\1\26\2\0"
            + "\1\32\2\0\1\103\2\0\1\104\1\105\3\0\1\106"
            + "\2\0\1\107\1\106\1\0\1\106\1\0\1\106\1\0"
            + "\1\106\1\0\1\106\1\0\1\106\1\0\1\106\1\0"
            + "\1\106\1\0\1\106\3\0\1\110\15\0";

    private static int[] zzUnpackAction() {
        int[] result = new int[197];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;
        /* index in packed string  */
        int j = offset;
        /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do {
                result[j++] = value;
            } while (--count > 0);
        }
        return j;
    }

    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0
            = "\0\0\0\64\0\150\0\234\0\320\0\u0104\0\u0138\0\u016c"
            + "\0\u01a0\0\u01d4\0\u0208\0\u0104\0\u0104\0\u0104\0\u0104\0\u0104"
            + "\0\u0104\0\u0104\0\u0104\0\u0104\0\u023c\0\u0270\0\u02a4\0\u02d8"
            + "\0\u030c\0\u0340\0\u0104\0\u0104\0\u0374\0\u0104\0\u03a8\0\u0104"
            + "\0\u03dc\0\u0410\0\u0104\0\u0444\0\u0410\0\u0478\0\u0104\0\u0104"
            + "\0\u04ac\0\u0104\0\u04e0\0\u0514\0\u0548\0\u0104\0\u0104\0\u0104"
            + "\0\u057c\0\u05b0\0\u05e4\0\u0618\0\u064c\0\u0680\0\u06b4\0\u06e8"
            + "\0\u071c\0\u0750\0\u0784\0\u07b8\0\u07ec\0\u0820\0\u0854\0\u0888"
            + "\0\u0104\0\u08bc\0\u08f0\0\u0104\0\u0104\0\u0104\0\u0104\0\u0104"
            + "\0\u0104\0\u0104\0\u0104\0\u0104\0\u0924\0\u0958\0\u098c\0\u09c0"
            + "\0\u09f4\0\u0a28\0\u0a5c\0\u0a90\0\u0ac4\0\u0af8\0\u0b2c\0\u0b60"
            + "\0\u0b94\0\u0104\0\u0104\0\u0bc8\0\u0bfc\0\u0c30\0\u0c64\0\u0104"
            + "\0\u0104\0\u0104\0\u0c98\0\u0ccc\0\u0d00\0\u0d34\0\u0d68\0\u0d9c"
            + "\0\u0dd0\0\u0270\0\u0e04\0\u0e38\0\u0e6c\0\u016c\0\u0104\0\u0958"
            + "\0\u0104\0\u0ea0\0\u0104\0\u0104\0\u0104\0\u0104\0\u0104\0\u0104"
            + "\0\u0104\0\u0104\0\u0104\0\u0ed4\0\u0f08\0\u0f3c\0\u0f70\0\u0fa4"
            + "\0\u0104\0\u0c98\0\u0104\0\u0104\0\u0104\0\u0104\0\u0fd8\0\u0104"
            + "\0\u100c\0\u0104\0\u0784\0\u016c\0\u1040\0\u016c\0\u1074\0\u10a8"
            + "\0\u10dc\0\u1110\0\u1144\0\u1178\0\u11ac\0\u11e0\0\u1214\0\u016c"
            + "\0\u1248\0\u127c\0\u0104\0\u0104\0\u12b0\0\u12e4\0\u1318\0\u134c"
            + "\0\u1380\0\u13b4\0\u13e8\0\u141c\0\u1450\0\u1484\0\u14b8\0\u14ec"
            + "\0\u1520\0\u1554\0\u1588\0\u15bc\0\u15f0\0\u1624\0\u1658\0\u168c"
            + "\0\u16c0\0\u16f4\0\u1728\0\u0104\0\u175c\0\u1790\0\u17c4\0\u0104"
            + "\0\u17f8\0\u182c\0\u1860\0\u1894\0\u18c8\0\u18fc\0\u1930\0\u1964"
            + "\0\u1998\0\u19cc\0\u1a00\0\u1a34\0\u1a68";

    private static int[] zzUnpackRowMap() {
        int[] result = new int[197];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;
        /* index in packed string  */
        int j = offset;
        /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpackTrans();

    private static final String ZZ_TRANS_PACKED_0
            = "\1\6\1\7\1\10\1\6\1\11\1\10\2\7\11\10"
            + "\1\12\1\13\1\14\2\10\1\15\1\16\1\17\1\20"
            + "\1\21\1\22\1\23\1\24\1\25\1\6\3\0\1\26"
            + "\1\27\2\10\1\30\2\10\1\31\1\10\1\32\3\10"
            + "\1\33\1\34\1\6\1\7\40\35\1\36\1\37\16\35"
            + "\1\40\1\35\1\41\1\35\40\42\1\43\1\44\1\45"
            + "\16\42\1\6\1\46\1\42\32\47\1\50\5\47\3\0"
            + "\21\47\36\51\1\52\1\51\1\36\1\37\20\51\1\53"
            + "\1\51\65\0\1\54\1\0\1\55\1\54\1\0\2\54"
            + "\1\56\1\57\1\60\1\0\1\57\1\60\2\0\1\61"
            + "\25\0\1\56\2\0\1\61\11\0\1\54\1\0\2\10"
            + "\1\62\15\10\3\0\2\10\16\0\14\10\3\0\1\10"
            + "\1\0\1\63\1\0\1\55\1\64\1\0\2\64\1\56"
            + "\1\57\1\60\1\65\1\57\1\66\2\0\1\61\25\0"
            + "\1\56\2\0\1\61\11\0\1\64\12\0\1\67\44\0"
            + "\1\70\16\0\1\71\44\0\1\72\43\0\1\73\26\0"
            + "\1\74\2\0\1\74\2\0\11\74\3\0\2\74\16\0"
            + "\14\74\5\0\2\10\1\62\15\10\3\0\2\10\16\0"
            + "\1\10\1\75\12\10\3\0\1\10\1\0\2\10\1\62"
            + "\15\10\3\0\2\10\16\0\4\10\1\76\7\10\3\0"
            + "\1\10\1\0\2\10\1\62\15\10\3\0\2\10\16\0"
            + "\7\10\1\77\4\10\3\0\1\10\1\0\2\10\1\62"
            + "\15\10\3\0\2\10\16\0\4\10\1\100\7\10\3\0"
            + "\1\10\40\35\2\0\16\35\1\0\1\35\1\0\1\35"
            + "\40\0\1\36\23\0\4\101\1\102\1\101\1\103\1\102"
            + "\5\101\1\104\22\101\3\0\1\101\1\105\2\101\1\106"
            + "\2\101\1\107\1\110\4\101\1\111\1\112\1\113\1\102"
            + "\61\0\1\114\42\0\1\43\23\0\4\101\1\115\1\101"
            + "\1\116\1\115\5\101\1\117\22\101\3\0\1\101\1\120"
            + "\2\101\1\121\2\101\1\122\1\123\4\101\1\124\1\125"
            + "\1\126\1\115\36\51\1\0\1\51\2\0\20\51\1\0"
            + "\1\51\4\101\1\102\1\101\1\103\1\102\5\101\1\104"
            + "\20\101\1\127\1\101\3\0\1\101\1\105\2\101\1\106"
            + "\2\101\1\107\1\110\4\101\1\111\1\112\1\113\1\102"
            + "\1\0\1\130\1\0\1\55\1\130\1\0\2\130\1\56"
            + "\1\57\1\60\1\0\1\57\1\60\2\0\1\61\2\0"
            + "\1\131\22\0\1\56\2\0\1\61\11\0\1\130\1\0"
            + "\1\55\2\0\1\55\1\0\2\55\6\0\1\132\1\133"
            + "\1\61\26\0\1\132\1\0\1\61\4\0\1\133\4\0"
            + "\1\55\1\0\1\134\2\0\1\134\1\0\2\134\11\0"
            + "\2\135\40\0\1\134\2\0\1\10\2\0\1\10\2\0"
            + "\11\10\3\0\2\10\16\0\14\10\5\0\1\136\1\0"
            + "\1\55\1\136\1\0\2\136\10\0\1\61\2\0\1\131"
            + "\25\0\1\61\11\0\1\136\1\0\1\136\1\0\1\55"
            + "\1\137\1\0\2\137\1\140\1\141\1\142\1\0\1\141"
            + "\1\142\2\0\1\61\2\0\1\131\22\0\1\140\2\0"
            + "\1\61\11\0\1\137\1\0\1\143\2\0\4\143\2\0"
            + "\1\143\2\0\4\143\26\0\3\143\4\0\1\143\4\0"
            + "\1\143\4\0\1\144\2\0\1\144\131\0\1\145\52\0"
            + "\1\146\74\0\1\147\52\0\1\150\17\0\37\73\1\151"
            + "\3\0\21\73\1\0\2\74\1\152\15\74\3\0\2\74"
            + "\16\0\14\74\3\0\1\74\1\0\2\10\1\62\15\10"
            + "\3\0\2\10\16\0\2\10\1\153\11\10\3\0\1\10"
            + "\1\0\2\10\1\62\15\10\3\0\2\10\16\0\2\10"
            + "\1\154\11\10\3\0\1\10\1\0\2\10\1\62\15\10"
            + "\3\0\2\10\16\0\1\10\1\155\12\10\3\0\1\10"
            + "\1\0\2\10\1\62\15\10\3\0\2\10\16\0\10\10"
            + "\1\156\3\10\3\0\1\10\4\0\1\103\1\0\2\103"
            + "\53\0\1\103\4\0\1\157\1\0\2\157\53\0\1\157"
            + "\4\0\1\160\1\0\2\160\51\0\1\161\1\0\1\160"
            + "\4\0\1\162\1\0\2\162\51\0\1\161\1\0\1\162"
            + "\61\0\1\163\63\0\1\164\63\0\1\165\63\0\1\166"
            + "\63\0\1\167\63\0\1\170\63\0\1\171\63\0\1\172"
            + "\40\0\1\173\26\0\1\174\1\0\1\55\1\174\1\0"
            + "\2\174\1\56\1\57\1\60\1\0\1\57\1\60\2\0"
            + "\1\61\25\0\1\56\2\0\1\61\11\0\1\174\1\0"
            + "\1\175\2\0\1\175\1\0\2\175\53\0\1\175\1\0"
            + "\1\134\2\0\1\134\1\0\2\134\6\0\1\132\1\133"
            + "\1\176\26\0\1\132\1\0\1\176\4\0\1\133\4\0"
            + "\1\134\1\0\1\134\2\0\1\134\1\0\2\134\53\0"
            + "\1\134\1\0\1\177\1\0\1\55\1\177\1\0\2\177"
            + "\10\0\1\61\30\0\1\61\11\0\1\177\1\0\1\177"
            + "\1\0\1\55\1\200\1\0\2\200\1\140\1\141\1\142"
            + "\1\0\1\141\1\142\2\0\1\61\25\0\1\140\2\0"
            + "\1\61\11\0\1\200\1\0\1\143\2\0\4\143\1\201"
            + "\1\0\1\202\1\0\1\203\1\202\3\143\25\0\1\201"
            + "\3\143\4\0\1\143\4\0\1\143\4\0\1\144\2\0"
            + "\1\144\1\204\1\205\1\206\1\0\1\205\1\206\30\0"
            + "\1\204\62\0\1\207\65\0\1\210\61\0\1\211\65\0"
            + "\1\212\14\0\36\73\1\213\1\151\3\0\21\73\1\0"
            + "\2\10\1\62\15\10\3\0\2\10\16\0\2\10\1\214"
            + "\11\10\3\0\1\10\1\0\2\10\1\62\5\10\1\215"
            + "\7\10\3\0\2\10\16\0\14\10\3\0\1\10\1\0"
            + "\2\10\1\62\15\10\3\0\2\10\16\0\5\10\1\216"
            + "\6\10\3\0\1\10\61\0\1\161\3\0\1\217\1\0"
            + "\1\55\1\217\1\0\2\217\1\56\1\57\1\60\1\0"
            + "\1\57\1\60\2\0\1\61\1\0\1\220\23\0\1\56"
            + "\2\0\1\61\11\0\1\217\1\0\1\221\2\0\1\221"
            + "\1\0\2\221\53\0\1\221\1\0\1\222\2\0\1\222"
            + "\1\0\2\222\11\0\2\223\40\0\1\222\1\0\1\224"
            + "\1\0\1\55\1\224\1\0\2\224\10\0\1\61\1\0"
            + "\1\220\26\0\1\61\11\0\1\224\1\0\1\224\1\0"
            + "\1\55\1\225\1\0\2\225\1\140\1\141\1\142\1\0"
            + "\1\141\1\142\2\0\1\61\1\0\1\220\23\0\1\140"
            + "\2\0\1\61\11\0\1\225\44\0\1\226\63\0\1\227"
            + "\20\0\2\10\1\62\15\10\3\0\2\10\16\0\5\10"
            + "\1\230\6\10\3\0\1\10\1\0\1\217\1\0\1\55"
            + "\1\217\1\0\2\217\1\56\1\57\1\60\1\0\1\57"
            + "\1\60\2\0\1\61\25\0\1\56\2\0\1\61\11\0"
            + "\1\217\1\0\1\231\2\0\1\231\1\0\2\231\53\0"
            + "\1\231\23\0\1\232\41\0\1\222\2\0\1\222\1\0"
            + "\2\222\6\0\1\132\1\133\27\0\1\132\6\0\1\133"
            + "\4\0\1\222\1\0\1\222\2\0\1\222\1\0\2\222"
            + "\53\0\1\222\1\0\1\224\1\0\1\55\1\224\1\0"
            + "\2\224\10\0\1\61\30\0\1\61\11\0\1\224\1\0"
            + "\1\224\1\0\1\55\1\225\1\0\2\225\1\140\1\141"
            + "\1\142\1\0\1\141\1\142\2\0\1\61\25\0\1\140"
            + "\2\0\1\61\11\0\1\225\56\0\1\233\63\0\1\234"
            + "\6\0\1\235\2\0\1\235\1\0\2\235\53\0\1\235"
            + "\1\0\1\236\2\0\1\236\1\0\2\236\53\0\1\236"
            + "\22\0\1\237\42\0\1\240\2\0\1\240\1\0\2\240"
            + "\53\0\1\240\1\0\1\241\2\0\1\241\1\0\2\241"
            + "\53\0\1\241\3\0\1\242\61\0\1\243\2\0\1\243"
            + "\1\0\2\243\53\0\1\243\1\0\1\244\2\0\1\244"
            + "\1\0\2\244\53\0\1\244\24\0\1\245\40\0\1\246"
            + "\2\0\1\246\1\0\2\246\53\0\1\246\1\0\1\247"
            + "\2\0\1\247\1\0\2\247\53\0\1\247\1\0\1\250"
            + "\2\0\1\250\1\0\2\250\53\0\1\250\1\0\1\251"
            + "\2\0\1\251\1\0\2\251\53\0\1\251\1\0\1\252"
            + "\2\0\1\252\1\0\2\252\53\0\1\252\23\0\1\253"
            + "\41\0\1\254\2\0\1\254\1\0\2\254\53\0\1\254"
            + "\1\0\1\255\2\0\1\255\1\0\2\255\53\0\1\255"
            + "\1\0\1\256\2\0\1\256\1\0\2\256\53\0\1\256"
            + "\1\0\1\257\2\0\1\257\1\0\2\257\53\0\1\257"
            + "\1\0\1\260\2\0\1\260\1\0\2\260\53\0\1\260"
            + "\23\0\1\261\41\0\1\262\2\0\1\262\1\0\2\262"
            + "\53\0\1\262\1\0\1\263\2\0\1\263\1\0\2\263"
            + "\53\0\1\263\1\0\1\264\2\0\1\264\1\0\2\264"
            + "\53\0\1\264\1\0\1\265\2\0\1\265\1\0\2\265"
            + "\53\0\1\265\3\0\1\266\15\0\2\267\2\0\1\270"
            + "\1\267\36\0\1\271\2\0\1\271\1\0\2\271\53\0"
            + "\1\271\1\0\1\272\2\0\1\272\1\0\2\272\53\0"
            + "\1\272\1\0\1\273\2\0\1\273\1\0\2\273\11\0"
            + "\2\267\2\0\1\270\1\267\34\0\1\273\1\0\1\274"
            + "\2\0\1\274\1\0\2\274\53\0\1\274\1\0\1\275"
            + "\2\0\1\275\1\0\2\275\11\0\2\267\2\0\1\270"
            + "\1\267\34\0\1\275\23\0\1\276\41\0\1\277\2\0"
            + "\1\277\1\0\2\277\11\0\2\267\2\0\1\270\1\267"
            + "\34\0\1\277\1\0\1\300\2\0\1\300\1\0\2\300"
            + "\53\0\1\300\1\0\1\301\2\0\1\301\1\0\2\301"
            + "\11\0\2\267\2\0\1\270\1\267\34\0\1\301\1\0"
            + "\1\270\2\0\1\270\1\0\2\270\53\0\1\270\1\0"
            + "\1\302\2\0\1\302\1\0\2\302\11\0\2\267\2\0"
            + "\1\270\1\267\34\0\1\302\1\0\1\303\2\0\1\303"
            + "\1\0\2\303\11\0\2\267\2\0\1\270\1\267\34\0"
            + "\1\303\1\0\1\304\2\0\1\304\1\0\2\304\11\0"
            + "\2\267\2\0\1\270\1\267\34\0\1\304\1\0\1\305"
            + "\2\0\1\305\1\0\2\305\11\0\2\267\2\0\1\270"
            + "\1\267\34\0\1\305\21\0\2\267\2\0\1\270\1\267"
            + "\35\0";

    private static int[] zzUnpackTrans() {
        int[] result = new int[6812];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int[] result) {
        int i = 0;
        /* index in packed string  */
        int j = offset;
        /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do {
                result[j++] = value;
            } while (--count > 0);
        }
        return j;
    }


    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String ZZ_ERROR_MSG[] = {
        "unknown internal scanner error",
        "error: could not match input",
        "error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0
            = "\5\0\1\11\5\1\11\11\6\1\2\11\1\1\1\11"
            + "\1\1\1\11\2\1\1\11\1\1\1\0\1\1\2\11"
            + "\1\1\1\11\3\1\3\11\3\0\1\1\1\0\1\1"
            + "\5\0\5\1\1\11\2\1\11\11\14\1\1\0\2\11"
            + "\1\1\2\0\1\1\3\11\2\1\6\0\4\1\1\11"
            + "\1\0\1\11\1\0\11\11\1\1\3\0\1\1\1\11"
            + "\1\1\4\11\1\0\1\11\1\0\1\11\5\1\2\0"
            + "\1\1\2\0\1\1\2\0\1\1\2\0\2\11\3\0"
            + "\1\1\2\0\2\1\1\0\1\1\1\0\1\1\1\0"
            + "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"
            + "\1\1\1\0\1\11\3\0\1\11\15\0";

    private static int[] zzUnpackAttribute() {
        int[] result = new int[197];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;
        /* index in packed string  */
        int j = offset;
        /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do {
                result[j++] = value;
            } while (--count > 0);
        }
        return j;
    }

    /**
     * the input device
     */
    private java.io.Reader zzReader;

    /**
     * the current state of the DFA
     */
    private int zzState;

    /**
     * the current lexical state
     */
    private int zzLexicalState = YYINITIAL;

    /**
     * this buffer contains the current text to be matched and is the source of
     * the yytext() string
     */
    private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

    /**
     * the textposition at the last accepting state
     */
    private int zzMarkedPos;

    /**
     * the current text position in the buffer
     */
    private int zzCurrentPos;

    /**
     * startRead marks the beginning of the yytext() string in the buffer
     */
    private int zzStartRead;

    /**
     * endRead marks the last character in the buffer, that has been read from
     * input
     */
    private int zzEndRead;

    /**
     * number of newlines encountered up to the start of the matched text
     */
    private int yyline;

    /**
     * the number of characters up to the start of the matched text
     */
    private int yychar;

    /**
     * the number of characters from the last newline up to the start of the
     * matched text
     */
    private int yycolumn;

    /**
     * zzAtBOL == true iff the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;

    /**
     * zzAtEOF == true iff the scanner is at the EOF
     */
    private boolean zzAtEOF;

    /**
     * denotes if the user-EOF-code has already been executed
     */
    private boolean zzEOFDone;

    /**
     * The number of occupied positions in zzBuffer beyond zzEndRead. When a
     * lead/high surrogate has been read from the input stream into the final
     * zzBuffer position, this will have a value of 1; otherwise, it will have a
     * value of 0.
     */
    private int zzFinalHighSurrogate = 0;

    /* user code: */
    public StringBuilder string = new StringBuilder(1024);
    public String stringVal = null;
    public char charVal = '\0';

    /**
     * Creates a new scanner
     *
     * @param in the java.io.Reader to read input from.
     */
    public TsonFlexFastOld(java.io.Reader in) {
        this.zzReader = in;
    }

    /**
     * Unpacks the compressed character translation table.
     *
     * @param packed the packed character translation table
     * @return the unpacked character translation table
     */
    private static char[] zzUnpackCMap(String packed) {
        char[] map = new char[0x110000];
        int i = 0;
        /* index in packed string  */
        int j = 0;
        /* index in unpacked array */
        while (i < 194) {
            int count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do {
                map[j++] = value;
            } while (--count > 0);
        }
        return map;
    }

    /**
     * Refills the input buffer.
     *
     * @return      <code>false</code>, iff there was new input.
     *
     * @exception java.io.IOException if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {

        /* first: make room (if you can) */
        if (zzStartRead > 0) {
            zzEndRead += zzFinalHighSurrogate;
            zzFinalHighSurrogate = 0;
            System.arraycopy(zzBuffer, zzStartRead,
                    zzBuffer, 0,
                    zzEndRead - zzStartRead);

            /* translate stored positions */
            zzEndRead -= zzStartRead;
            zzCurrentPos -= zzStartRead;
            zzMarkedPos -= zzStartRead;
            zzStartRead = 0;
        }

        /* is the buffer big enough? */
        if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
            /* if not: blow it up */
            char newBuffer[] = new char[zzBuffer.length * 2];
            System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
            zzBuffer = newBuffer;
            zzEndRead += zzFinalHighSurrogate;
            zzFinalHighSurrogate = 0;
        }

        /* fill the buffer with new input */
        int requested = zzBuffer.length - zzEndRead;
        int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

        /* not supposed to occur according to specification of java.io.Reader */
        if (numRead == 0) {
            throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
        }
        if (numRead > 0) {
            zzEndRead += numRead;
            /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
            if (numRead == requested) {
                if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
                    --zzEndRead;
                    zzFinalHighSurrogate = 1;
                }
            }
            /* potentially more input available */
            return false;
        }

        /* numRead < 0 ==> end of stream */
        return true;
    }

    /**
     * Closes the input stream.
     */
    public final void yyclose() throws java.io.IOException {
        zzAtEOF = true;
        /* indicate end of file */
        zzEndRead = zzStartRead;
        /* invalidate buffer    */

        if (zzReader != null) {
            zzReader.close();
        }
    }

    /**
     * Resets the scanner to read from a new input stream. Does not close the
     * old reader.
     *
     * All internal variables are reset, the old input stream
     * <b>cannot</b> be reused (internal buffer is discarded and lost). Lexical
     * state is set to <tt>ZZ_INITIAL</tt>.
     *
     * Internal scan buffer is resized down to its initial length, if it has
     * grown.
     *
     * @param reader the new input stream
     */
    public final void yyreset(java.io.Reader reader) {
        zzReader = reader;
        zzAtBOL = true;
        zzAtEOF = false;
        zzEOFDone = false;
        zzEndRead = zzStartRead = 0;
        zzCurrentPos = zzMarkedPos = 0;
        zzFinalHighSurrogate = 0;
        yyline = yychar = yycolumn = 0;
        zzLexicalState = YYINITIAL;
        if (zzBuffer.length > ZZ_BUFFERSIZE) {
            zzBuffer = new char[ZZ_BUFFERSIZE];
        }
    }

    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }

    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }

    /**
     * Returns the text matched by the current regular expression.
     */
    public final String yytext() {
        return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
    }

    /**
     * Returns the character at position <tt>pos</tt> from the matched text.
     *
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch. A value from 0 to
     * yylength()-1.
     *
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer[zzStartRead + pos];
    }

    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }

    /**
     * Reports an error that occured while scanning.
     *
     * In a wellformed scanner (no or only correct usage of yypushback(int) and
     * a match-all fallback rule) this method will only be called with things
     * that "Can't Possibly Happen". If this method is called, something is
     * seriously wrong (e.g. a JFlex bug producing a faulty scanner etc.).
     *
     * Usual syntax/scanner level error handling should be done in error
     * fallback rules.
     *
     * @param errorCode the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }

    /**
     * Pushes the specified amount of characters back into the input stream.
     *
     * They will be read again by then next call of the scanning method
     *
     * @param number the number of characters to be read again. This number must
     * not be greater than yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength()) {
            zzScanError(ZZ_PUSHBACK_2BIG);
        }

        zzMarkedPos -= number;
    }

    /**
     * Resumes scanning until the next regular expression is matched, the end of
     * input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     * @exception java.io.IOException if any I/O-Error occurs
     */
    public int yylex() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        char[] zzBufferL = zzBuffer;
        char[] zzCMapL = ZZ_CMAP;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            boolean zzR = false;
            int zzCh;
            int zzCharCount;
            for (zzCurrentPosL = zzStartRead;
                    zzCurrentPosL < zzMarkedPosL;
                    zzCurrentPosL += zzCharCount) {
                zzCh = zzBufferL[zzCurrentPosL];//Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
                zzCharCount = 1;//Character.charCount(zzCh);
                switch (zzCh) {
                    case '\u000B':  // fall through
                    case '\u000C':  // fall through
                    case '\u0085':  // fall through
                    case '\u2028':  // fall through
                    case '\u2029':
                        yyline++;
                        yycolumn = 0;
                        zzR = false;
                        break;
                    case '\r':
                        yyline++;
                        yycolumn = 0;
                        zzR = true;
                        break;
                    case '\n':
                        if (zzR) {
                            zzR = false;
                        } else {
                            yyline++;
                            yycolumn = 0;
                        }
                        break;
                    default:
                        zzR = false;
                        yycolumn += zzCharCount;
                }
            }

            if (zzR) {
                // peek one character ahead if it is \n (if we have counted one line too much)
                boolean zzPeek;
                if (zzMarkedPosL < zzEndReadL) {
                    zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                } else if (zzAtEOF) {
                    zzPeek = false;
                } else {
                    boolean eof = zzRefill();
                    zzEndReadL = zzEndRead;
                    zzMarkedPosL = zzMarkedPos;
                    zzBufferL = zzBuffer;
                    if (eof) {
                        zzPeek = false;
                    } else {
                        zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                    }
                }
                if (zzPeek) {
                    yyline--;
                }
            }
            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];

            // set up zzAction for empty match case:
            int zzAttributes = zzAttrL[zzState];
            if ((zzAttributes & 1) == 1) {
                zzAction = zzState;
            }

            zzForAction:
            {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
//            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
//            zzCurrentPosL += Character.charCount(zzInput);

                        zzInput = zzBufferL[zzCurrentPosL];//Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                        zzCurrentPosL++; //zzCurrentPosL += Character.charCount(zzInput);
                    } else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
//              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
//              zzCurrentPosL += Character.charCount(zzInput);
                            zzInput = zzBufferL[zzCurrentPosL];//Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                            zzCurrentPosL++; //zzCurrentPosL += Character.charCount(zzInput);
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
                    if (zzNext == -1) {
                        break zzForAction;
                    }
                    zzState = zzNext;

                    zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) {
                            break zzForAction;
                        }
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                zzAtEOF = true;
                return YYEOF;
            } else {
                switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                    case 1: {
                        throw new RuntimeException("Unsupported " + yytext());
                    }
                    // fall through
                    case 73:
                        break;
                    case 2: {
                        return TsonParserTokens.INTEGER;
                    }
                    // fall through
                    case 74:
                        break;
                    case 3: {
                        return TsonParserTokens.NAME;
                    }
                    // fall through
                    case 75:
                        break;
                    case 4: {
                        return TsonParserTokens.COLON;
                    }
                    // fall through
                    case 76:
                        break;
                    case 5: {
                        return TsonParserTokens.COMMA;
                    }
                    // fall through
                    case 77:
                        break;
                    case 6: {
                        return TsonParserTokens.LPAREN;
                    }
                    // fall through
                    case 78:
                        break;
                    case 7: {
                        return TsonParserTokens.RPAREN;
                    }
                    // fall through
                    case 79:
                        break;
                    case 8: {
                        return TsonParserTokens.LBRACK;
                    }
                    // fall through
                    case 80:
                        break;
                    case 9: {
                        return TsonParserTokens.RBRACK;
                    }
                    // fall through
                    case 81:
                        break;
                    case 10: {
                        return TsonParserTokens.LBRACE;
                    }
                    // fall through
                    case 82:
                        break;
                    case 11: {
                        return TsonParserTokens.RBRACE;
                    }
                    // fall through
                    case 83:
                        break;
                    case 12: {
                        return TsonParserTokens.AT;
                    }
                    // fall through
                    case 84:
                        break;
                    case 13: {
                        yybegin(REGEX);
                    }
                    // fall through
                    case 85:
                        break;
                    case 14: {
                        yybegin(STRING);
                        string.setLength(0);
                    }
                    // fall through
                    case 86:
                        break;
                    case 15: {
                        yybegin(CHARLITERAL);
                    }
                    // fall through
                    case 87:
                        break;
                    case 16: {
                        string.append(yytext());
                    }
                    // fall through
                    case 88:
                        break;
                    case 17: {
                        throw new RuntimeException("Unterminated string at end of line");
                    }
                    // fall through
                    case 89:
                        break;
                    case 18: {
                        yybegin(YYINITIAL);
                        stringVal = string.toString();
                        return TsonParserTokens.STRING;
                    }
                    // fall through
                    case 90:
                        break;
                    case 19: {
                        throw new RuntimeException("Unterminated character literal at end of line");
                    }
                    // fall through
                    case 91:
                        break;
                    case 20: {
                        yybegin(YYINITIAL);
                        return TsonParserTokens.CHARSTREAM_START;
                    }
                    // fall through
                    case 92:
                        break;
                    case 21: {
                        yybegin(YYINITIAL);
                        stringVal = string.toString();
                        return TsonParserTokens.REGEX;
                    }
                    // fall through
                    case 93:
                        break;
                    case 22: {
                        return TsonParserTokens.DOUBLE;
                    }
                    // fall through
                    case 94:
                        break;
                    case 23: {
                        return TsonParserTokens.LONG;
                    }
                    // fall through
                    case 95:
                        break;
                    case 24: {
                        return TsonParserTokens.SHORT;
                    }
                    // fall through
                    case 96:
                        break;
                    case 25: {
                        return TsonParserTokens.BYTE;
                    }
                    // fall through
                    case 97:
                        break;
                    case 26: {
                        return TsonParserTokens.INTEGER_O;
                    }
                    // fall through
                    case 98:
                        break;
                    case 27: {
                        return TsonParserTokens.ALIAS;
                    }
                    // fall through
                    case 99:
                        break;
                    case 28: {
                        throw new RuntimeException("Illegal escape sequence \"" + yytext() + "\"");
                    }
                    // fall through
                    case 100:
                        break;
                    case 29: {
                        char val = (char) Integer.parseInt(yytext().substring(1), 8);
                        string.append(val);
                    }
                    // fall through
                    case 101:
                        break;
                    case 30: {
                        string.append('\b');
                    }
                    // fall through
                    case 102:
                        break;
                    case 31: {
                        string.append('\n');
                    }
                    // fall through
                    case 103:
                        break;
                    case 32: {
                        string.append('\f');
                    }
                    // fall through
                    case 104:
                        break;
                    case 33: {
                        string.append('\t');
                    }
                    // fall through
                    case 105:
                        break;
                    case 34: {
                        string.append('\r');
                    }
                    // fall through
                    case 106:
                        break;
                    case 35: {
                        string.append('\"');
                    }
                    // fall through
                    case 107:
                        break;
                    case 36: {
                        string.append('\'');
                    }
                    // fall through
                    case 108:
                        break;
                    case 37: {
                        string.append('\\');
                    }
                    // fall through
                    case 109:
                        break;
                    case 38: {
                        yybegin(YYINITIAL);
                        charVal = yytext().charAt(0);
                        return TsonParserTokens.CHARACTER;
                    }
                    // fall through
                    case 110:
                        break;
                    case 39: {
                        return TsonParserTokens.FLOAT;
                    }
                    // fall through
                    case 111:
                        break;
                    case 40: {
                        return TsonParserTokens.LONG_O;
                    }
                    // fall through
                    case 112:
                        break;
                    case 41: {
                        return TsonParserTokens.SHORT_O;
                    }
                    // fall through
                    case 113:
                        break;
                    case 42: {
                        return TsonParserTokens.BYTE_O;
                    }
                    // fall through
                    case 114:
                        break;
                    case 43: {
                        return TsonParserTokens.INTEGER_H;
                    }
                    // fall through
                    case 115:
                        break;
                    case 44: {
                        return TsonParserTokens.INTEGER_B;
                    }
                    // fall through
                    case 116:
                        break;
                    case 45: {
                        return TsonParserTokens.NAN;
                    }
                    // fall through
                    case 117:
                        break;
                    case 46: {
                        yybegin(YYINITIAL);
                        int val = Integer.parseInt(yytext().substring(1, yylength() - 1), 8);
                        charVal = (char) val;
                        return TsonParserTokens.CHARACTER;
                    }
                    // fall through
                    case 118:
                        break;
                    case 47: {
                        yybegin(YYINITIAL);
                        charVal = '\b';
                        return TsonParserTokens.CHARACTER;
                    }
                    // fall through
                    case 119:
                        break;
                    case 48: {
                        yybegin(YYINITIAL);
                        charVal = '\n';
                        return TsonParserTokens.CHARACTER;
                    }
                    // fall through
                    case 120:
                        break;
                    case 49: {
                        yybegin(YYINITIAL);
                        charVal = '\f';
                        return TsonParserTokens.CHARACTER;
                    }
                    // fall through
                    case 121:
                        break;
                    case 50: {
                        yybegin(YYINITIAL);
                        charVal = '\t';
                        return TsonParserTokens.CHARACTER;
                    }
                    // fall through
                    case 122:
                        break;
                    case 51: {
                        yybegin(YYINITIAL);
                        charVal = '\r';
                        return TsonParserTokens.CHARACTER;
                    }
                    // fall through
                    case 123:
                        break;
                    case 52: {
                        yybegin(YYINITIAL);
                        charVal = '\"';
                        return TsonParserTokens.CHARACTER;
                    }
                    // fall through
                    case 124:
                        break;
                    case 53: {
                        yybegin(YYINITIAL);
                        charVal = '\'';
                        return TsonParserTokens.CHARACTER;
                    }
                    // fall through
                    case 125:
                        break;
                    case 54: {
                        yybegin(YYINITIAL);
                        charVal = '\\';
                        return TsonParserTokens.CHARACTER;
                    }
                    // fall through
                    case 126:
                        break;
                    case 55: {
                        string.append('/');
                    }
                    // fall through
                    case 127:
                        break;
                    case 56: {
                        return TsonParserTokens.LONG_H;
                    }
                    // fall through
                    case 128:
                        break;
                    case 57: {
                        return TsonParserTokens.BYTE_H;
                    }
                    // fall through
                    case 129:
                        break;
                    case 58: {
                        return TsonParserTokens.SHORT_H;
                    }
                    // fall through
                    case 130:
                        break;
                    case 59: {
                        return TsonParserTokens.LONG_B;
                    }
                    // fall through
                    case 131:
                        break;
                    case 60: {
                        return TsonParserTokens.SHORT_B;
                    }
                    // fall through
                    case 132:
                        break;
                    case 61: {
                        return TsonParserTokens.BYTE_B;
                    }
                    // fall through
                    case 133:
                        break;
                    case 62: {
                        return TsonParserTokens.POS_INF;
                    }
                    // fall through
                    case 134:
                        break;
                    case 63: {
                        return TsonParserTokens.NEG_INF;
                    }
                    // fall through
                    case 135:
                        break;
                    case 64: {
                        return TsonParserTokens.COMMENT;
                    }
                    // fall through
                    case 136:
                        break;
                    case 65: {
                        return TsonParserTokens.NULL;
                    }
                    // fall through
                    case 137:
                        break;
                    case 66: {
                        return TsonParserTokens.TRUE;
                    }
                    // fall through
                    case 138:
                        break;
                    case 67: {
                        return TsonParserTokens.FALSE;
                    }
                    // fall through
                    case 139:
                        break;
                    case 68: {
                        return TsonParserTokens.POS_BOUND;
                    }
                    // fall through
                    case 140:
                        break;
                    case 69: {
                        return TsonParserTokens.NEG_BOUND;
                    }
                    // fall through
                    case 141:
                        break;
                    case 70: {
                        return TsonParserTokens.TIME;
                    }
                    // fall through
                    case 142:
                        break;
                    case 71: {
                        return TsonParserTokens.DATE;
                    }
                    // fall through
                    case 143:
                        break;
                    case 72: {
                        return TsonParserTokens.DATETIME;
                    }
                    // fall through
                    case 144:
                        break;
                    default:
                        zzScanError(ZZ_NO_MATCH);
                }
            }
        }
    }

}
