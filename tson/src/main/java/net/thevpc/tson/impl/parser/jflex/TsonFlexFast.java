/* The following code was generated by JFlex 1.7.0 */

package net.thevpc.tson.impl.parser.jflex;
import net.thevpc.tson.TsonLexicalAnalyzer;
import net.thevpc.tson.TsonParserTokens;
import net.thevpc.tson.impl.parser.CharStreamCodeSupport;
import net.thevpc.tson.impl.parser.CharStreamCodeSupports;
import net.thevpc.tson.impl.parser.TsonFlexCharStreamReader;
import net.thevpc.tson.impl.parser.TsonFlexCodeReader;
import net.thevpc.tson.impl.util.Base64DecoderAdapter;
import net.thevpc.tson.impl.util.KmpAlgo;
import net.thevpc.tson.impl.parser.*;
import net.thevpc.tson.impl.util.*;
import net.thevpc.tson.*;
import java.io.*;



/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>tson.flex</tt>
 */
public final class TsonFlexFast implements TsonLexicalAnalyzer {

    /** This character denotes the end of file */
    public static final int YYEOF = -1;

    /** initial size of the lookahead buffer */
    private static final int ZZ_BUFFERSIZE = 16384;

    /** lexical states */
    public static final int YYINITIAL = 0;
    public static final int STRING = 2;
    public static final int CHARLITERAL = 4;
    public static final int REGEX = 6;
    public static final int CHARSTREAM = 8;
    public static final int CHARSTREAM_CODE = 10;
    public static final int BINARYSTREAM = 12;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     *                  at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
            0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6, 6
    };

    /**
     * Translates characters to character classes
     */
    private static final String ZZ_CMAP_PACKED =
            "\12\0\1\40\1\42\1\42\1\41\24\0\1\60\1\0\1\2\1\0"+
                    "\1\43\1\61\1\27\1\30\1\37\1\21\1\26\1\22\1\3\1\36"+
                    "\1\4\1\7\2\65\4\6\2\1\1\23\5\0\1\35\1\5\1\12"+
                    "\1\5\1\17\1\20\1\16\2\63\1\57\2\63\1\10\1\63\1\54"+
                    "\4\63\1\14\1\24\3\63\1\13\1\63\1\25\1\31\1\64\1\32"+
                    "\1\62\1\63\1\0\1\50\1\15\1\5\1\56\1\51\1\47\5\63"+
                    "\1\46\1\63\1\44\1\55\2\63\1\53\1\11\1\52\1\45\2\63"+
                    "\1\13\2\63\1\33\1\0\1\34\7\0\1\42\u1fa2\0\1\42\1\42"+
                    "\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

    /**
     * Translates characters to character classes
     */
    private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int [] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 =
            "\7\0\1\1\1\2\1\3\1\2\2\1\1\4\1\5"+
                    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
                    "\1\1\4\3\1\16\1\17\1\1\1\20\2\21\1\22"+
                    "\2\1\2\23\1\0\1\1\1\20\1\24\1\1\1\25"+
                    "\1\26\1\27\1\30\1\31\1\2\1\32\1\33\1\34"+
                    "\1\35\3\0\1\36\1\0\1\35\5\0\1\37\4\3"+
                    "\2\0\1\40\1\41\1\42\2\43\1\44\1\45\1\46"+
                    "\1\47\1\50\1\51\1\52\1\53\1\54\13\42\1\2"+
                    "\1\0\1\55\2\32\2\0\1\36\1\56\1\57\1\60"+
                    "\1\61\1\62\6\0\3\3\1\63\1\64\1\65\1\0"+
                    "\1\43\1\0\1\66\1\0\1\67\1\70\1\71\1\72"+
                    "\1\73\1\74\1\75\1\76\1\77\1\2\3\0\1\36"+
                    "\1\100\1\101\1\102\1\103\1\104\1\105\1\0\1\106"+
                    "\1\0\1\107\1\110\1\111\1\3\1\112\1\0\1\2"+
                    "\2\0\1\32\2\0\1\36\2\0\1\113\1\114\2\0"+
                    "\1\115\1\116\3\0\1\117\2\0\1\120\1\117\1\0"+
                    "\1\117\1\0\1\117\1\0\1\117\1\0\1\117\1\0"+
                    "\1\117\1\0\1\117\1\0\1\117\1\0\1\117\3\0"+
                    "\1\121\15\0";

    private static int [] zzUnpackAction() {
        int [] result = new int[212];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int [] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Translates a state to a row index in the transition table
     */
    private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\66\0\154\0\242\0\330\0\u010e\0\u0144\0\u017a"+
                    "\0\u01b0\0\u01e6\0\u021c\0\u0252\0\u0288\0\u017a\0\u017a\0\u017a"+
                    "\0\u017a\0\u017a\0\u017a\0\u017a\0\u017a\0\u017a\0\u02be\0\u02f4"+
                    "\0\u032a\0\u0360\0\u0396\0\u03cc\0\u017a\0\u017a\0\u0402\0\u0438"+
                    "\0\u017a\0\u046e\0\u017a\0\u04a4\0\u04da\0\u017a\0\u0510\0\u04da"+
                    "\0\u0546\0\u057c\0\u017a\0\u05b2\0\u017a\0\u017a\0\u017a\0\u017a"+
                    "\0\u017a\0\u05e8\0\u061e\0\u017a\0\u017a\0\u017a\0\u0654\0\u068a"+
                    "\0\u06c0\0\u06f6\0\u072c\0\u0762\0\u0798\0\u07ce\0\u0804\0\u083a"+
                    "\0\u0870\0\u08a6\0\u08dc\0\u0912\0\u0948\0\u097e\0\u09b4\0\u09ea"+
                    "\0\u017a\0\u017a\0\u017a\0\u0a20\0\u0a56\0\u017a\0\u017a\0\u017a"+
                    "\0\u017a\0\u017a\0\u017a\0\u017a\0\u017a\0\u017a\0\u0a8c\0\u0ac2"+
                    "\0\u0af8\0\u0b2e\0\u0b64\0\u0b9a\0\u0bd0\0\u0c06\0\u0c3c\0\u0c72"+
                    "\0\u0ca8\0\u0cde\0\u0d14\0\u017a\0\u017a\0\u0d4a\0\u0d80\0\u0db6"+
                    "\0\u0dec\0\u017a\0\u017a\0\u017a\0\u0e22\0\u0e58\0\u0e8e\0\u0ec4"+
                    "\0\u0efa\0\u0f30\0\u0f66\0\u02f4\0\u0f9c\0\u0fd2\0\u1008\0\u01e6"+
                    "\0\u017a\0\u017a\0\u103e\0\u017a\0\u0ac2\0\u017a\0\u1074\0\u017a"+
                    "\0\u017a\0\u017a\0\u017a\0\u017a\0\u017a\0\u017a\0\u017a\0\u017a"+
                    "\0\u10aa\0\u10e0\0\u1116\0\u114c\0\u1182\0\u017a\0\u0e22\0\u017a"+
                    "\0\u017a\0\u017a\0\u017a\0\u11b8\0\u017a\0\u11ee\0\u017a\0\u0870"+
                    "\0\u01e6\0\u1224\0\u01e6\0\u125a\0\u1290\0\u12c6\0\u12fc\0\u1332"+
                    "\0\u1368\0\u139e\0\u13d4\0\u140a\0\u1440\0\u01e6\0\u017a\0\u1476"+
                    "\0\u14ac\0\u017a\0\u017a\0\u14e2\0\u1518\0\u154e\0\u1584\0\u15ba"+
                    "\0\u15f0\0\u1626\0\u165c\0\u1692\0\u16c8\0\u16fe\0\u1734\0\u176a"+
                    "\0\u17a0\0\u17d6\0\u180c\0\u1842\0\u1878\0\u18ae\0\u18e4\0\u191a"+
                    "\0\u1950\0\u1986\0\u017a\0\u19bc\0\u19f2\0\u1a28\0\u017a\0\u1a5e"+
                    "\0\u1a94\0\u1aca\0\u1b00\0\u1b36\0\u1b6c\0\u1ba2\0\u1bd8\0\u1c0e"+
                    "\0\u1c44\0\u1c7a\0\u1cb0\0\u1ce6";

    private static int [] zzUnpackRowMap() {
        int [] result = new int[212];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int [] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int [] ZZ_TRANS = zzUnpackTrans();

    private static final String ZZ_TRANS_PACKED_0 =
            "\1\10\1\11\1\12\1\10\1\13\1\12\2\11\11\12"+
                    "\1\14\1\15\1\16\2\12\1\17\1\20\1\21\1\22"+
                    "\1\23\1\24\1\25\1\26\1\27\1\10\3\0\1\30"+
                    "\1\31\2\12\1\32\2\12\1\33\1\12\1\34\3\12"+
                    "\1\35\1\36\1\37\1\12\1\10\1\11\40\40\1\41"+
                    "\1\42\16\40\1\43\3\40\1\44\1\40\40\45\1\46"+
                    "\1\47\1\50\16\45\1\10\2\45\1\51\1\45\36\52"+
                    "\1\53\1\52\1\41\1\42\22\52\1\54\1\52\40\55"+
                    "\3\0\23\55\34\56\1\57\3\56\3\0\23\56\32\60"+
                    "\1\61\5\60\3\0\23\60\67\0\1\62\1\0\1\63"+
                    "\1\62\1\0\2\62\1\64\1\65\1\66\1\0\1\65"+
                    "\1\66\2\0\1\67\25\0\1\64\2\0\1\67\13\0"+
                    "\1\62\1\0\2\12\1\70\15\12\3\0\2\12\16\0"+
                    "\14\12\3\0\1\12\1\0\1\12\1\0\1\71\1\0"+
                    "\1\63\1\72\1\0\2\72\1\64\1\65\1\66\1\73"+
                    "\1\65\1\74\2\0\1\67\25\0\1\64\2\0\1\67"+
                    "\13\0\1\72\12\0\1\75\44\0\1\76\20\0\1\77"+
                    "\44\0\1\100\45\0\1\101\30\0\1\102\2\0\1\102"+
                    "\2\0\11\102\3\0\2\102\16\0\14\102\3\0\1\102"+
                    "\3\0\2\12\1\70\15\12\3\0\2\12\16\0\1\12"+
                    "\1\103\12\12\3\0\1\12\1\0\1\12\1\0\2\12"+
                    "\1\70\15\12\3\0\2\12\16\0\4\12\1\104\7\12"+
                    "\3\0\1\12\1\0\1\12\1\0\2\12\1\70\15\12"+
                    "\3\0\2\12\16\0\7\12\1\105\4\12\3\0\1\12"+
                    "\1\0\1\12\1\0\2\12\1\70\15\12\3\0\2\12"+
                    "\16\0\4\12\1\106\7\12\3\0\1\12\1\0\1\12"+
                    "\1\0\1\107\2\0\15\107\3\0\2\107\1\0\1\110"+
                    "\1\0\1\111\1\0\1\112\10\0\14\107\3\0\1\107"+
                    "\1\0\1\107\40\40\2\0\16\40\1\0\3\40\1\0"+
                    "\1\40\40\0\1\41\25\0\4\113\1\114\1\113\1\115"+
                    "\1\114\5\113\1\116\22\113\3\0\1\113\1\117\2\113"+
                    "\1\120\2\113\1\121\1\122\4\113\1\123\1\124\2\113"+
                    "\1\125\1\114\61\0\1\126\44\0\1\46\25\0\4\113"+
                    "\1\127\1\113\1\130\1\127\5\113\1\131\22\113\3\0"+
                    "\1\113\1\132\2\113\1\133\2\113\1\134\1\135\4\113"+
                    "\1\136\1\137\2\113\1\140\1\127\36\52\1\0\1\52"+
                    "\2\0\22\52\1\0\1\52\4\113\1\114\1\113\1\115"+
                    "\1\114\5\113\1\116\20\113\1\141\1\113\3\0\1\113"+
                    "\1\117\2\113\1\120\2\113\1\121\1\122\4\113\1\123"+
                    "\1\124\2\113\1\125\1\114\1\0\1\142\1\0\1\63"+
                    "\1\142\1\0\2\142\1\64\1\65\1\66\1\0\1\65"+
                    "\1\66\2\0\1\67\2\0\1\143\22\0\1\64\2\0"+
                    "\1\67\13\0\1\142\1\0\1\63\2\0\1\63\1\0"+
                    "\2\63\6\0\1\144\1\145\1\67\26\0\1\144\1\0"+
                    "\1\67\4\0\1\145\6\0\1\63\1\0\1\146\2\0"+
                    "\1\146\1\0\2\146\11\0\2\147\42\0\1\146\2\0"+
                    "\1\12\2\0\1\12\2\0\11\12\3\0\2\12\16\0"+
                    "\14\12\3\0\1\12\3\0\1\150\1\0\1\63\1\150"+
                    "\1\0\2\150\10\0\1\67\2\0\1\143\25\0\1\67"+
                    "\13\0\1\150\1\0\1\150\1\0\1\63\1\151\1\0"+
                    "\2\151\1\152\1\153\1\154\1\0\1\153\1\154\2\0"+
                    "\1\67\2\0\1\143\22\0\1\152\2\0\1\67\13\0"+
                    "\1\151\1\0\1\155\2\0\4\155\2\0\1\155\2\0"+
                    "\4\155\26\0\3\155\4\0\1\155\6\0\1\155\4\0"+
                    "\1\156\2\0\1\156\133\0\1\157\54\0\1\160\76\0"+
                    "\1\161\54\0\1\162\21\0\37\101\1\163\3\0\23\101"+
                    "\1\0\2\102\1\164\15\102\3\0\2\102\16\0\14\102"+
                    "\3\0\1\102\1\0\1\102\1\0\2\12\1\70\15\12"+
                    "\3\0\2\12\16\0\2\12\1\165\11\12\3\0\1\12"+
                    "\1\0\1\12\1\0\2\12\1\70\15\12\3\0\2\12"+
                    "\16\0\2\12\1\166\11\12\3\0\1\12\1\0\1\12"+
                    "\1\0\2\12\1\70\15\12\3\0\2\12\16\0\1\12"+
                    "\1\167\12\12\3\0\1\12\1\0\1\12\1\0\2\12"+
                    "\1\70\15\12\3\0\2\12\16\0\10\12\1\170\3\12"+
                    "\3\0\1\12\1\0\1\12\1\0\1\107\2\0\15\107"+
                    "\3\0\2\107\3\0\1\171\1\0\1\172\10\0\14\107"+
                    "\3\0\1\107\1\0\1\107\1\0\1\173\2\0\15\173"+
                    "\3\0\2\173\16\0\14\173\3\0\1\173\1\0\1\173"+
                    "\4\0\1\115\1\0\2\115\55\0\1\115\4\0\1\174"+
                    "\1\0\2\174\55\0\1\174\4\0\1\175\1\0\2\175"+
                    "\51\0\1\176\3\0\1\175\4\0\1\177\1\0\2\177"+
                    "\51\0\1\176\3\0\1\177\61\0\1\200\65\0\1\201"+
                    "\65\0\1\202\65\0\1\203\65\0\1\204\65\0\1\205"+
                    "\65\0\1\206\65\0\1\207\42\0\1\210\30\0\1\211"+
                    "\1\0\1\63\1\211\1\0\2\211\1\64\1\65\1\66"+
                    "\1\0\1\65\1\66\2\0\1\67\25\0\1\64\2\0"+
                    "\1\67\13\0\1\211\1\0\1\212\2\0\1\212\1\0"+
                    "\2\212\55\0\1\212\1\0\1\146\2\0\1\146\1\0"+
                    "\2\146\6\0\1\144\1\145\1\213\26\0\1\144\1\0"+
                    "\1\213\4\0\1\145\6\0\1\146\1\0\1\146\2\0"+
                    "\1\146\1\0\2\146\55\0\1\146\1\0\1\214\1\0"+
                    "\1\63\1\214\1\0\2\214\10\0\1\67\30\0\1\67"+
                    "\13\0\1\214\1\0\1\214\1\0\1\63\1\215\1\0"+
                    "\2\215\1\152\1\153\1\154\1\0\1\153\1\154\2\0"+
                    "\1\67\25\0\1\152\2\0\1\67\13\0\1\215\1\0"+
                    "\1\155\2\0\4\155\1\216\1\0\1\217\1\0\1\220"+
                    "\1\217\3\155\25\0\1\216\3\155\4\0\1\155\6\0"+
                    "\1\155\4\0\1\156\2\0\1\156\1\221\1\222\1\223"+
                    "\1\0\1\222\1\223\30\0\1\221\64\0\1\224\67\0"+
                    "\1\225\63\0\1\226\67\0\1\227\16\0\36\101\1\230"+
                    "\1\163\3\0\23\101\1\0\2\12\1\70\15\12\3\0"+
                    "\2\12\16\0\2\12\1\231\11\12\3\0\1\12\1\0"+
                    "\1\12\1\0\2\12\1\70\5\12\1\232\7\12\3\0"+
                    "\2\12\16\0\14\12\3\0\1\12\1\0\1\12\1\0"+
                    "\2\12\1\70\15\12\3\0\2\12\16\0\5\12\1\233"+
                    "\6\12\3\0\1\12\1\0\1\12\1\0\1\173\2\0"+
                    "\15\173\3\0\2\173\2\0\1\234\13\0\14\173\3\0"+
                    "\1\173\1\0\1\173\61\0\1\176\5\0\1\235\1\0"+
                    "\1\63\1\235\1\0\2\235\1\64\1\65\1\66\1\0"+
                    "\1\65\1\66\2\0\1\67\1\0\1\236\23\0\1\64"+
                    "\2\0\1\67\13\0\1\235\1\0\1\237\2\0\1\237"+
                    "\1\0\2\237\55\0\1\237\1\0\1\240\2\0\1\240"+
                    "\1\0\2\240\11\0\2\241\42\0\1\240\1\0\1\242"+
                    "\1\0\1\63\1\242\1\0\2\242\10\0\1\67\1\0"+
                    "\1\236\26\0\1\67\13\0\1\242\1\0\1\242\1\0"+
                    "\1\63\1\243\1\0\2\243\1\152\1\153\1\154\1\0"+
                    "\1\153\1\154\2\0\1\67\1\0\1\236\23\0\1\152"+
                    "\2\0\1\67\13\0\1\243\44\0\1\244\65\0\1\245"+
                    "\22\0\2\12\1\70\15\12\3\0\2\12\16\0\5\12"+
                    "\1\246\6\12\3\0\1\12\1\0\1\12\33\0\1\247"+
                    "\33\0\1\235\1\0\1\63\1\235\1\0\2\235\1\64"+
                    "\1\65\1\66\1\0\1\65\1\66\2\0\1\67\25\0"+
                    "\1\64\2\0\1\67\13\0\1\235\1\0\1\250\2\0"+
                    "\1\250\1\0\2\250\55\0\1\250\23\0\1\251\43\0"+
                    "\1\240\2\0\1\240\1\0\2\240\6\0\1\144\1\145"+
                    "\27\0\1\144\6\0\1\145\6\0\1\240\1\0\1\240"+
                    "\2\0\1\240\1\0\2\240\55\0\1\240\1\0\1\242"+
                    "\1\0\1\63\1\242\1\0\2\242\10\0\1\67\30\0"+
                    "\1\67\13\0\1\242\1\0\1\242\1\0\1\63\1\243"+
                    "\1\0\2\243\1\152\1\153\1\154\1\0\1\153\1\154"+
                    "\2\0\1\67\25\0\1\152\2\0\1\67\13\0\1\243"+
                    "\56\0\1\252\65\0\1\253\10\0\1\254\2\0\1\254"+
                    "\1\0\2\254\55\0\1\254\1\0\1\255\2\0\1\255"+
                    "\1\0\2\255\55\0\1\255\22\0\1\256\44\0\1\257"+
                    "\2\0\1\257\1\0\2\257\55\0\1\257\1\0\1\260"+
                    "\2\0\1\260\1\0\2\260\55\0\1\260\3\0\1\261"+
                    "\63\0\1\262\2\0\1\262\1\0\2\262\55\0\1\262"+
                    "\1\0\1\263\2\0\1\263\1\0\2\263\55\0\1\263"+
                    "\24\0\1\264\42\0\1\265\2\0\1\265\1\0\2\265"+
                    "\55\0\1\265\1\0\1\266\2\0\1\266\1\0\2\266"+
                    "\55\0\1\266\1\0\1\267\2\0\1\267\1\0\2\267"+
                    "\55\0\1\267\1\0\1\270\2\0\1\270\1\0\2\270"+
                    "\55\0\1\270\1\0\1\271\2\0\1\271\1\0\2\271"+
                    "\55\0\1\271\23\0\1\272\43\0\1\273\2\0\1\273"+
                    "\1\0\2\273\55\0\1\273\1\0\1\274\2\0\1\274"+
                    "\1\0\2\274\55\0\1\274\1\0\1\275\2\0\1\275"+
                    "\1\0\2\275\55\0\1\275\1\0\1\276\2\0\1\276"+
                    "\1\0\2\276\55\0\1\276\1\0\1\277\2\0\1\277"+
                    "\1\0\2\277\55\0\1\277\23\0\1\300\43\0\1\301"+
                    "\2\0\1\301\1\0\2\301\55\0\1\301\1\0\1\302"+
                    "\2\0\1\302\1\0\2\302\55\0\1\302\1\0\1\303"+
                    "\2\0\1\303\1\0\2\303\55\0\1\303\1\0\1\304"+
                    "\2\0\1\304\1\0\2\304\55\0\1\304\3\0\1\305"+
                    "\15\0\2\306\2\0\1\307\1\306\40\0\1\310\2\0"+
                    "\1\310\1\0\2\310\55\0\1\310\1\0\1\311\2\0"+
                    "\1\311\1\0\2\311\55\0\1\311\1\0\1\312\2\0"+
                    "\1\312\1\0\2\312\11\0\2\306\2\0\1\307\1\306"+
                    "\36\0\1\312\1\0\1\313\2\0\1\313\1\0\2\313"+
                    "\55\0\1\313\1\0\1\314\2\0\1\314\1\0\2\314"+
                    "\11\0\2\306\2\0\1\307\1\306\36\0\1\314\23\0"+
                    "\1\315\43\0\1\316\2\0\1\316\1\0\2\316\11\0"+
                    "\2\306\2\0\1\307\1\306\36\0\1\316\1\0\1\317"+
                    "\2\0\1\317\1\0\2\317\55\0\1\317\1\0\1\320"+
                    "\2\0\1\320\1\0\2\320\11\0\2\306\2\0\1\307"+
                    "\1\306\36\0\1\320\1\0\1\307\2\0\1\307\1\0"+
                    "\2\307\55\0\1\307\1\0\1\321\2\0\1\321\1\0"+
                    "\2\321\11\0\2\306\2\0\1\307\1\306\36\0\1\321"+
                    "\1\0\1\322\2\0\1\322\1\0\2\322\11\0\2\306"+
                    "\2\0\1\307\1\306\36\0\1\322\1\0\1\323\2\0"+
                    "\1\323\1\0\2\323\11\0\2\306\2\0\1\307\1\306"+
                    "\36\0\1\323\1\0\1\324\2\0\1\324\1\0\2\324"+
                    "\11\0\2\306\2\0\1\307\1\306\36\0\1\324\21\0"+
                    "\2\306\2\0\1\307\1\306\37\0";

    private static int [] zzUnpackTrans() {
        int [] result = new int[7452];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int [] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String ZZ_ERROR_MSG[] = {
            "unknown internal scanner error",
            "error: could not match input",
            "error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\7\0\1\11\5\1\11\11\6\1\2\11\2\1\1\11"+
                    "\1\1\1\11\2\1\1\11\1\1\1\0\2\1\1\11"+
                    "\1\1\5\11\2\1\3\11\3\0\1\1\1\0\1\1"+
                    "\5\0\5\1\2\0\3\11\2\1\11\11\14\1\1\0"+
                    "\2\11\1\1\2\0\1\1\3\11\2\1\6\0\4\1"+
                    "\2\11\1\0\1\11\1\0\1\11\1\0\11\11\1\1"+
                    "\3\0\1\1\1\11\1\1\4\11\1\0\1\11\1\0"+
                    "\1\11\4\1\1\0\1\1\2\0\1\1\2\0\1\1"+
                    "\2\0\1\1\1\11\2\0\2\11\3\0\1\1\2\0"+
                    "\2\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
                    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
                    "\1\11\3\0\1\11\15\0";

    private static int [] zzUnpackAttribute() {
        int [] result = new int[212];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int [] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /** the input device */
    private java.io.Reader zzReader;

    /** the current state of the DFA */
    private int zzState;

    /** the current lexical state */
    private int zzLexicalState = YYINITIAL;

    /** this buffer contains the current text to be matched and is
     the source of the yytext() string */
    private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

    /** the textposition at the last accepting state */
    private int zzMarkedPos;

    /** the current text position in the buffer */
    private int zzCurrentPos;

    /** startRead marks the beginning of the yytext() string in the buffer */
    private int zzStartRead;

    /** endRead marks the last character in the buffer, that has been read
     from input */
    private int zzEndRead;

    /** number of newlines encountered up to the start of the matched text */
    private int yyline;

    /** the number of characters up to the start of the matched text */
    private int yychar;

    /**
     * the number of characters from the last newline up to the start of the
     * matched text
     */
    private int yycolumn;

    /**
     * zzAtBOL == true iff the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;

    /** zzAtEOF == true iff the scanner is at the EOF */
    private boolean zzAtEOF;

    /** denotes if the user-EOF-code has already been executed */
    private boolean zzEOFDone;

    /**
     * The number of occupied positions in zzBuffer beyond zzEndRead.
     * When a lead/high surrogate has been read from the input stream
     * into the final zzBuffer position, this will have a value of 1;
     * otherwise, it will have a value of 0.
     */
    private int zzFinalHighSurrogate = 0;

    /* user code: */
    public StringBuilder string = new StringBuilder(1024);
    public String stringVal=null;
    public char charVal = '\0';
    public Reader charStream;
    public InputStream binaryStream;
    public KmpAlgo kmp=null;
    public CharStreamCodeSupport code;

    public int nextToken(){
        try{
            return yylex();
        }catch(IOException ex){
            throw new UncheckedIOException(ex);
        }
    }

    public Reader currentReader(){
        return charStream;
    }

    public InputStream currentInputStream(){
        return binaryStream;
    }

    public String currentImage(){
        return yytext();
    }

    public String currentString(){
        return stringVal;
    }

    public char currentChar(){
        return charVal;
    }

    private String yytext_substring(int from,int to){
        return new String(zzBuffer, zzStartRead+from, zzMarkedPos - zzStartRead-from+to);
    }

    private void commitCharString(){
        stringVal=string.toString();
        string.setLength(0);
    }

    private boolean appendAndCommitCharString(char c){
        string.append(c);
        int len=string.length();
        if(len>1024){
            commitCharString();
            return true;
        }
        return false;
    }

    private String deleteTailCharString(int count){
        int len=string.length();
        String tail=string.substring(len-count,len);
        string.delete(len-count,len);
        return tail;
    }

    private String prepareCharStringButTail(int count){
        int len=string.length();
        String tail=string.substring(len-count,len);
        stringVal=string.toString();
        string.setLength(0);
        string.append(tail);
        return tail;
    }



    /**
     * Creates a new scanner
     *
     * @param   in  the java.io.Reader to read input from.
     */
    public TsonFlexFast(java.io.Reader in) {
        this.zzReader = in;
    }


    /**
     * Unpacks the compressed character translation table.
     *
     * @param packed   the packed character translation table
     * @return         the unpacked character translation table
     */
    private static char [] zzUnpackCMap(String packed) {
        char [] map = new char[0x110000];
        int i = 0;  /* index in packed string  */
        int j = 0;  /* index in unpacked array */
        while (i < 194) {
            int  count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do map[j++] = value; while (--count > 0);
        }
        return map;
    }


    /**
     * Refills the input buffer.
     *
     * @return      <code>false</code>, iff there was new input.
     *
     * @exception   java.io.IOException  if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {

        /* first: make room (if you can) */
        if (zzStartRead > 0) {
            zzEndRead += zzFinalHighSurrogate;
            zzFinalHighSurrogate = 0;
            System.arraycopy(zzBuffer, zzStartRead,
                    zzBuffer, 0,
                    zzEndRead-zzStartRead);

            /* translate stored positions */
            zzEndRead-= zzStartRead;
            zzCurrentPos-= zzStartRead;
            zzMarkedPos-= zzStartRead;
            zzStartRead = 0;
        }

        /* is the buffer big enough? */
        if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
            /* if not: blow it up */
            char newBuffer[] = new char[zzBuffer.length*2];
            System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
            zzBuffer = newBuffer;
            zzEndRead += zzFinalHighSurrogate;
            zzFinalHighSurrogate = 0;
        }

        /* fill the buffer with new input */
        int requested = zzBuffer.length - zzEndRead;
        int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

        /* not supposed to occur according to specification of java.io.Reader */
        if (numRead == 0) {
            throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
        }
        if (numRead > 0) {
            zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
            if (numRead == requested) {
                if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
                    --zzEndRead;
                    zzFinalHighSurrogate = 1;
                }
            }
            /* potentially more input available */
            return false;
        }

        /* numRead < 0 ==> end of stream */
        return true;
    }


    /**
     * Closes the input stream.
     */
    public final void yyclose() throws java.io.IOException {
        zzAtEOF = true;            /* indicate end of file */
        zzEndRead = zzStartRead;  /* invalidate buffer    */

        if (zzReader != null)
            zzReader.close();
    }


    /**
     * Resets the scanner to read from a new input stream.
     * Does not close the old reader.
     *
     * All internal variables are reset, the old input stream
     * <b>cannot</b> be reused (internal buffer is discarded and lost).
     * Lexical state is set to <tt>ZZ_INITIAL</tt>.
     *
     * Internal scan buffer is resized down to its initial length, if it has grown.
     *
     * @param reader   the new input stream
     */
    public final void yyreset(java.io.Reader reader) {
        zzReader = reader;
        zzAtBOL  = true;
        zzAtEOF  = false;
        zzEOFDone = false;
        zzEndRead = zzStartRead = 0;
        zzCurrentPos = zzMarkedPos = 0;
        zzFinalHighSurrogate = 0;
        yyline = yychar = yycolumn = 0;
        zzLexicalState = YYINITIAL;
        if (zzBuffer.length > ZZ_BUFFERSIZE)
            zzBuffer = new char[ZZ_BUFFERSIZE];
    }


    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }


    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }


    /**
     * Returns the text matched by the current regular expression.
     */
    public final String yytext() {
        return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
    }


    /**
     * Returns the character at position <tt>pos</tt> from the
     * matched text.
     *
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch.
     *            A value from 0 to yylength()-1.
     *
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer[zzStartRead+pos];
    }


    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos-zzStartRead;
    }


    /**
     * Reports an error that occured while scanning.
     *
     * In a wellformed scanner (no or only correct usage of
     * yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     *
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param   errorCode  the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        }
        catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }


    /**
     * Pushes the specified amount of characters back into the input stream.
     *
     * They will be read again by then next call of the scanning method
     *
     * @param number  the number of characters to be read again.
     *                This number must not be greater than yylength()!
     */
    public void yypushback(int number)  {
        if ( number > yylength() )
            zzScanError(ZZ_PUSHBACK_2BIG);

        zzMarkedPos -= number;
    }


    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return      the next token
     * @exception   java.io.IOException  if any I/O-Error occurs
     */
    public int yylex() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        char [] zzBufferL = zzBuffer;
        char [] zzCMapL = ZZ_CMAP;

        int [] zzTransL = ZZ_TRANS;
        int [] zzRowMapL = ZZ_ROWMAP;
        int [] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];

            // set up zzAction for empty match case:
            int zzAttributes = zzAttrL[zzState];
            if ( (zzAttributes & 1) == 1 ) {
                zzAction = zzState;
            }


            zzForAction: {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
//                        zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
//                        zzCurrentPosL += Character.charCount(zzInput);
                        zzInput = zzBufferL[zzCurrentPosL];
                        zzCurrentPosL ++;
                    }
                    else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    }
                    else {
                        // store back cached positions
                        zzCurrentPos  = zzCurrentPosL;
                        zzMarkedPos   = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL  = zzCurrentPos;
                        zzMarkedPosL   = zzMarkedPos;
                        zzBufferL      = zzBuffer;
                        zzEndReadL     = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        }
                        else {
//                            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
//                            zzCurrentPosL += Character.charCount(zzInput);
                            zzInput = zzBufferL[zzCurrentPosL];
                            zzCurrentPosL ++;
                        }
                    }
                    int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
                    if (zzNext == -1) break zzForAction;
                    zzState = zzNext;

                    zzAttributes = zzAttrL[zzState];
                    if ( (zzAttributes & 1) == 1 ) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ( (zzAttributes & 8) == 8 ) break zzForAction;
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                zzAtEOF = true;
                return YYEOF;
            }
            else {
                switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                    case 1:
                    { throw new RuntimeException("Unsupported "+yytext());
                    }
                    // fall through
                    case 82: break;
                    case 2:
                    { return TsonParserTokens.INTEGER;
                    }
                    // fall through
                    case 83: break;
                    case 3:
                    { return TsonParserTokens.NAME;
                    }
                    // fall through
                    case 84: break;
                    case 4:
                    { return TsonParserTokens.COLON;
                    }
                    // fall through
                    case 85: break;
                    case 5:
                    { return TsonParserTokens.COMMA;
                    }
                    // fall through
                    case 86: break;
                    case 6:
                    { return TsonParserTokens.LPAREN;
                    }
                    // fall through
                    case 87: break;
                    case 7:
                    { return TsonParserTokens.RPAREN;
                    }
                    // fall through
                    case 88: break;
                    case 8:
                    { return TsonParserTokens.LBRACK;
                    }
                    // fall through
                    case 89: break;
                    case 9:
                    { return TsonParserTokens.RBRACK;
                    }
                    // fall through
                    case 90: break;
                    case 10:
                    { return TsonParserTokens.LBRACE;
                    }
                    // fall through
                    case 91: break;
                    case 11:
                    { return TsonParserTokens.RBRACE;
                    }
                    // fall through
                    case 92: break;
                    case 12:
                    { return TsonParserTokens.AT;
                    }
                    // fall through
                    case 93: break;
                    case 13:
                    { yybegin(REGEX);
                    }
                    // fall through
                    case 94: break;
                    case 14:
                    { yybegin(STRING); string.setLength(0);
                    }
                    // fall through
                    case 95: break;
                    case 15:
                    { yybegin(CHARLITERAL);
                    }
                    // fall through
                    case 96: break;
                    case 16:
                    { string.append( yytext() );
                    }
                    // fall through
                    case 97: break;
                    case 17:
                    { throw new RuntimeException("Unterminated string at end of line");
                    }
                    // fall through
                    case 98: break;
                    case 18:
                    { yybegin(YYINITIAL); stringVal=string.toString();return TsonParserTokens.STRING;
                    }
                    // fall through
                    case 99: break;
                    case 19:
                    { throw new RuntimeException("Unterminated character literal at end of line");
                    }
                    // fall through
                    case 100: break;
                    case 20:
                    { yybegin(YYINITIAL); stringVal=string.toString(); return TsonParserTokens.REGEX;
                    }
                    // fall through
                    case 101: break;
                    case 21:
                    { char c=zzBuffer[zzStartRead];
                        if(kmp.next(c)){
                            yybegin(YYINITIAL);
                            string.append(c);
                            deleteTailCharString(kmp.length());
                            commitCharString();
                            return TsonParserTokens.CHARSTREAM_END;
                        }else{
                            if(appendAndCommitCharString(c)){
                                return TsonParserTokens.CHARSTREAM_PART;
                            }
                        }
                    }
                    // fall through
                    case 102: break;
                    case 22:
                    { char c=zzBuffer[zzStartRead];
                        code.next(c);
                        if(appendAndCommitCharString(c)){
                            return TsonParserTokens.CHARSTREAM_PART;
                        }
                    }
                    // fall through
                    case 103: break;
                    case 23:
                    { char c=zzBuffer[zzStartRead];
                        if(code.isValid()){
                            return TsonParserTokens.CHARSTREAM_END;
                        }
                        if(appendAndCommitCharString(c)){
                            return TsonParserTokens.CHARSTREAM_PART;
                        }
                    }
                    // fall through
                    case 104: break;
                    case 24:
                    { char c=zzBuffer[zzStartRead];
                        if(appendAndCommitCharString(c)){
                            return TsonParserTokens.BINARYSTREAM_PART;
                        }
                    }
                    // fall through
                    case 105: break;
                    case 25:
                    { commitCharString();
                        return TsonParserTokens.BINARYSTREAM_END;
                    }
                    // fall through
                    case 106: break;
                    case 26:
                    { return TsonParserTokens.DOUBLE;
                    }
                    // fall through
                    case 107: break;
                    case 27:
                    { return TsonParserTokens.LONG;
                    }
                    // fall through
                    case 108: break;
                    case 28:
                    { return TsonParserTokens.SHORT;
                    }
                    // fall through
                    case 109: break;
                    case 29:
                    { return TsonParserTokens.BYTE;
                    }
                    // fall through
                    case 110: break;
                    case 30:
                    { return TsonParserTokens.INTEGER_O;
                    }
                    // fall through
                    case 111: break;
                    case 31:
                    { return TsonParserTokens.ALIAS;
                    }
                    // fall through
                    case 112: break;
                    case 32:
                    { yybegin(BINARYSTREAM);
                        string.setLength(0);
                        binaryStream=new Base64DecoderAdapter(new TsonFlexCodeReader(this));
                        return TsonParserTokens.BINARYSTREAM_START;
                    }
                    // fall through
                    case 113: break;
                    case 33:
                    { yybegin(CHARSTREAM_CODE);
                        string.setLength(0);
                        code= CharStreamCodeSupports.of("");
                        charStream=new TsonFlexCodeReader(this);
                        code.reset();
                        return TsonParserTokens.CHARSTREAM_START;
                    }
                    // fall through
                    case 114: break;
                    case 34:
                    { throw new RuntimeException("Illegal escape sequence \""+yytext()+"\"");
                    }
                    // fall through
                    case 115: break;
                    case 35:
                    { char val = (char) Integer.parseInt(yytext().substring(1),8);
                        string.append( val );
                    }
                    // fall through
                    case 116: break;
                    case 36:
                    { string.append( '\b' );
                    }
                    // fall through
                    case 117: break;
                    case 37:
                    { string.append( '\n' );
                    }
                    // fall through
                    case 118: break;
                    case 38:
                    { string.append( '\f' );
                    }
                    // fall through
                    case 119: break;
                    case 39:
                    { string.append( '\t' );
                    }
                    // fall through
                    case 120: break;
                    case 40:
                    { string.append( '\r' );
                    }
                    // fall through
                    case 121: break;
                    case 41:
                    { string.append( '\"' );
                    }
                    // fall through
                    case 122: break;
                    case 42:
                    { string.append( '\'' );
                    }
                    // fall through
                    case 123: break;
                    case 43:
                    { string.append( '\\' );
                    }
                    // fall through
                    case 124: break;
                    case 44:
                    { yybegin(YYINITIAL); charVal=yytext().charAt(0); return TsonParserTokens.CHARACTER;
                    }
                    // fall through
                    case 125: break;
                    case 45:
                    { return TsonParserTokens.FLOAT;
                    }
                    // fall through
                    case 126: break;
                    case 46:
                    { return TsonParserTokens.LONG_O;
                    }
                    // fall through
                    case 127: break;
                    case 47:
                    { return TsonParserTokens.SHORT_O;
                    }
                    // fall through
                    case 128: break;
                    case 48:
                    { return TsonParserTokens.BYTE_O;
                    }
                    // fall through
                    case 129: break;
                    case 49:
                    { return TsonParserTokens.INTEGER_H;
                    }
                    // fall through
                    case 130: break;
                    case 50:
                    { return TsonParserTokens.INTEGER_B;
                    }
                    // fall through
                    case 131: break;
                    case 51:
                    { return TsonParserTokens.NAN;
                    }
                    // fall through
                    case 132: break;
                    case 52:
                    { yybegin(BINARYSTREAM);
                        string.setLength(0);
                        String streamName=yytext_substring(1,-1);
                        char[] end=java.util.Arrays.copyOfRange(zzBuffer,zzStartRead,zzMarkedPos);
                        end[end.length-1]=']';
                        kmp=KmpAlgo.compile(end);
                        charStream=new TsonFlexCharStreamReader(streamName,this);
                        return TsonParserTokens.CHARSTREAM_START;
                    }
                    // fall through
                    case 133: break;
                    case 53:
                    { yybegin(CHARSTREAM);
                        string.setLength(0);
                        String streamName=yytext_substring(1,-1);
                        char[] end=java.util.Arrays.copyOfRange(zzBuffer,zzStartRead,zzMarkedPos);
                        end[end.length-1]='}';
                        kmp=KmpAlgo.compile(end);
                        charStream=new TsonFlexCharStreamReader(streamName,this);
                        return TsonParserTokens.CHARSTREAM_START;
                    }
                    // fall through
                    case 134: break;
                    case 54:
                    { yybegin(YYINITIAL);
                        int val = Integer.parseInt(yytext().substring(1,yylength()-1),8);
                        charVal=(char)val;
                        return TsonParserTokens.CHARACTER;
                    }
                    // fall through
                    case 135: break;
                    case 55:
                    { yybegin(YYINITIAL); charVal='\b'; return TsonParserTokens.CHARACTER;
                    }
                    // fall through
                    case 136: break;
                    case 56:
                    { yybegin(YYINITIAL); charVal='\n'; return TsonParserTokens.CHARACTER;
                    }
                    // fall through
                    case 137: break;
                    case 57:
                    { yybegin(YYINITIAL); charVal='\f'; return TsonParserTokens.CHARACTER;
                    }
                    // fall through
                    case 138: break;
                    case 58:
                    { yybegin(YYINITIAL); charVal='\t'; return TsonParserTokens.CHARACTER;
                    }
                    // fall through
                    case 139: break;
                    case 59:
                    { yybegin(YYINITIAL); charVal='\r'; return TsonParserTokens.CHARACTER;
                    }
                    // fall through
                    case 140: break;
                    case 60:
                    { yybegin(YYINITIAL); charVal='\"'; return TsonParserTokens.CHARACTER;
                    }
                    // fall through
                    case 141: break;
                    case 61:
                    { yybegin(YYINITIAL); charVal='\''; return TsonParserTokens.CHARACTER;
                    }
                    // fall through
                    case 142: break;
                    case 62:
                    { yybegin(YYINITIAL); charVal='\\';  return TsonParserTokens.CHARACTER;
                    }
                    // fall through
                    case 143: break;
                    case 63:
                    { string.append( '/' );
                    }
                    // fall through
                    case 144: break;
                    case 64:
                    { return TsonParserTokens.LONG_H;
                    }
                    // fall through
                    case 145: break;
                    case 65:
                    { return TsonParserTokens.BYTE_H;
                    }
                    // fall through
                    case 146: break;
                    case 66:
                    { return TsonParserTokens.SHORT_H;
                    }
                    // fall through
                    case 147: break;
                    case 67:
                    { return TsonParserTokens.LONG_B;
                    }
                    // fall through
                    case 148: break;
                    case 68:
                    { return TsonParserTokens.SHORT_B;
                    }
                    // fall through
                    case 149: break;
                    case 69:
                    { return TsonParserTokens.BYTE_B;
                    }
                    // fall through
                    case 150: break;
                    case 70:
                    { return TsonParserTokens.POS_INF;
                    }
                    // fall through
                    case 151: break;
                    case 71:
                    { return TsonParserTokens.NEG_INF;
                    }
                    // fall through
                    case 152: break;
                    case 72:
                    { return TsonParserTokens.COMMENT;
                    }
                    // fall through
                    case 153: break;
                    case 73:
                    { return TsonParserTokens.NULL;
                    }
                    // fall through
                    case 154: break;
                    case 74:
                    { return TsonParserTokens.TRUE;
                    }
                    // fall through
                    case 155: break;
                    case 75:
                    { return TsonParserTokens.FALSE;
                    }
                    // fall through
                    case 156: break;
                    case 76:
                    { yybegin(CHARSTREAM_CODE);
                        string.setLength(0);
                        String language=yytext_substring(2,-2);
                        code=CharStreamCodeSupports.of(language);
                        charStream=new TsonFlexCodeReader(this);
                        return TsonParserTokens.CHARSTREAM_START;
                    }
                    // fall through
                    case 157: break;
                    case 77:
                    { return TsonParserTokens.POS_BOUND;
                    }
                    // fall through
                    case 158: break;
                    case 78:
                    { return TsonParserTokens.NEG_BOUND;
                    }
                    // fall through
                    case 159: break;
                    case 79:
                    { return TsonParserTokens.TIME;
                    }
                    // fall through
                    case 160: break;
                    case 80:
                    { return TsonParserTokens.DATE;
                    }
                    // fall through
                    case 161: break;
                    case 81:
                    { return TsonParserTokens.DATETIME;
                    }
                    // fall through
                    case 162: break;
                    default:
                        zzScanError(ZZ_NO_MATCH);
                }
            }
        }
    }


}
