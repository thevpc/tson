/* Generated By:JavaCC: Do not edit this line. TsonStreamParserImplTokenManager.java */
package net.thevpc.tson.impl.parser.javacc;
import net.thevpc.tson.impl.parser.*;
import net.thevpc.tson.impl.elements.*;
import net.thevpc.tson.*;

/** Token Manager. */
public class TsonStreamParserImplTokenManager implements TsonStreamParserImplConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x1c0000L) != 0L)
            return 56;
         if ((active0 & 0x380000000000L) != 0L || (active1 & 0x28000000600L) != 0L)
            return 167;
         if ((active0 & 0x700000000L) != 0L || (active1 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 107;
            return 217;
         }
         if ((active0 & 0x38000000000000L) != 0L)
            return 218;
         if ((active0 & 0x6000000000000L) != 0L)
            return 209;
         return -1;
      case 1:
         if ((active0 & 0x4000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 114;
               jjmatchedPos = 1;
            }
            return 216;
         }
         if ((active0 & 0x700000000L) != 0L || (active1 & 0x2000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 107;
               jjmatchedPos = 1;
            }
            return 217;
         }
         return -1;
      case 2:
         if ((active1 & 0x2000000000L) != 0L)
            return 217;
         if ((active0 & 0x4000000000000L) != 0L)
            return 216;
         if ((active0 & 0x700000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 107;
               jjmatchedPos = 2;
            }
            return 217;
         }
         return -1;
      case 3:
         if ((active0 & 0x500000000L) != 0L)
            return 217;
         if ((active0 & 0x200000000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 107;
               jjmatchedPos = 3;
            }
            return 217;
         }
         return -1;
      case 4:
         if ((active0 & 0x200000000L) != 0L)
            return 217;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 35:
         jjmatchedKind = 85;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x7fc00000L);
      case 37:
         jjmatchedKind = 54;
         return jjMoveStringLiteralDfa1_0(0x180000000000000L, 0x0L);
      case 38:
         jjmatchedKind = 82;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x180000L);
      case 40:
         return jjStopAtPos(0, 35);
      case 41:
         return jjStopAtPos(0, 36);
      case 42:
         jjmatchedKind = 46;
         return jjMoveStringLiteralDfa1_0(0x1800000000000L, 0x0L);
      case 43:
         jjmatchedKind = 40;
         return jjMoveStringLiteralDfa1_0(0x60000000000L, 0x14000000000L);
      case 44:
         return jjStopAtPos(0, 97);
      case 45:
         jjmatchedKind = 43;
         return jjMoveStringLiteralDfa1_0(0x300000000000L, 0x28000000600L);
      case 47:
         jjmatchedKind = 49;
         return jjMoveStringLiteralDfa1_0(0x4000000000000L, 0x0L);
      case 58:
         jjmatchedKind = 39;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x180L);
      case 59:
         jjmatchedKind = 95;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000000L);
      case 60:
         jjmatchedKind = 63;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x6023L);
      case 61:
         jjmatchedKind = 57;
         return jjMoveStringLiteralDfa1_0(0xc00000000000000L, 0x1800L);
      case 62:
         jjmatchedKind = 66;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x58L);
      case 64:
         jjmatchedKind = 98;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800000000L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000000000L);
      case 91:
         return jjStopAtPos(0, 37);
      case 93:
         return jjStopAtPos(0, 38);
      case 94:
         jjmatchedKind = 51;
         return jjMoveStringLiteralDfa1_0(0x30000000000000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x200000000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x400000000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x100000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 5);
      case 124:
         jjmatchedKind = 79;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x30000L);
      case 125:
         return jjStopAtPos(0, 6);
      case 126:
         jjmatchedKind = 60;
         return jjMoveStringLiteralDfa1_0(0x6000000000000000L, 0x0L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 35:
         if ((active1 & 0x400000L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x7f800000L);
      case 37:
         if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000000L, active1, 0L);
      case 38:
         if ((active1 & 0x80000L) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100000L);
      case 42:
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000L, active1, 0L);
      case 43:
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000000L, active1, 0L);
      case 45:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000000L, active1, 0x2400L);
      case 47:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000L, active1, 0L);
      case 59:
         if ((active1 & 0x100000000L) != 0L)
            return jjStopAtPos(1, 96);
         break;
      case 60:
         if ((active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2L);
      case 61:
         if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x20L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x40L) != 0L)
            return jjStopAtPos(1, 70);
         else if ((active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000000L, active1, 0x5100L);
      case 62:
         if ((active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x200L) != 0L)
            return jjStopAtPos(1, 73);
         else if ((active1 & 0x800L) != 0L)
            return jjStopAtPos(1, 75);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x10L);
      case 64:
         if ((active1 & 0x800000000L) != 0L)
            return jjStopAtPos(1, 99);
         break;
      case 66:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x30000000000L);
      case 73:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xc000000000L);
      case 94:
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000L, active1, 0x2000000000L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000L, active1, 0L);
      case 124:
         if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20000L);
      case 126:
         if ((active0 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 35:
         if ((active1 & 0x800000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x7f000000L);
      case 37:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStopAtPos(2, 56);
         break;
      case 38:
         if ((active1 & 0x100000L) != 0L)
            return jjStopAtPos(2, 84);
         break;
      case 42:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(2, 48);
         break;
      case 43:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(2, 42);
         break;
      case 45:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(2, 45);
         else if ((active1 & 0x2000L) != 0L)
            return jjStopAtPos(2, 77);
         break;
      case 47:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 50, 216);
         break;
      case 60:
         if ((active1 & 0x2L) != 0L)
            return jjStopAtPos(2, 65);
         break;
      case 61:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStopAtPos(2, 59);
         else if ((active1 & 0x100L) != 0L)
            return jjStopAtPos(2, 72);
         else if ((active1 & 0x4000L) != 0L)
            return jjStopAtPos(2, 78);
         break;
      case 62:
         if ((active1 & 0x10L) != 0L)
            return jjStopAtPos(2, 68);
         else if ((active1 & 0x400L) != 0L)
            return jjStopAtPos(2, 74);
         else if ((active1 & 0x1000L) != 0L)
            return jjStopAtPos(2, 76);
         break;
      case 78:
         if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 101, 217);
         break;
      case 94:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStopAtPos(2, 53);
         break;
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x600000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0xc000000000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x30000000000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000L, active1, 0L);
      case 124:
         if ((active1 & 0x20000L) != 0L)
            return jjStopAtPos(2, 81);
         break;
      case 126:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(2, 62);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 35:
         if ((active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x7e000000L);
      case 101:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 32, 217);
         break;
      case 102:
         if ((active1 & 0x4000000000L) != 0L)
            return jjStopAtPos(3, 102);
         else if ((active1 & 0x8000000000L) != 0L)
            return jjStopAtPos(3, 103);
         break;
      case 108:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 34, 217);
         break;
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x30000000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 35:
         if ((active1 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x7c000000L);
      case 101:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(4, 33, 217);
         break;
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x30000000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, 0L, active1);
      return 5;
   }
   switch(curChar)
   {
      case 35:
         if ((active1 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active1, 0x78000000L);
      case 100:
         if ((active1 & 0x10000000000L) != 0L)
            return jjStopAtPos(5, 104);
         else if ((active1 & 0x20000000000L) != 0L)
            return jjStopAtPos(5, 105);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, 0L, active1);
}
private int jjMoveStringLiteralDfa6_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(4, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, 0L, active1);
      return 6;
   }
   switch(curChar)
   {
      case 35:
         if ((active1 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active1, 0x70000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, 0L, active1);
}
private int jjMoveStringLiteralDfa7_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(5, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, 0L, active1);
      return 7;
   }
   switch(curChar)
   {
      case 35:
         if ((active1 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active1, 0x60000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, 0L, active1);
}
private int jjMoveStringLiteralDfa8_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(6, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, 0L, active1);
      return 8;
   }
   switch(curChar)
   {
      case 35:
         if ((active1 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active1, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, 0L, active1);
}
private int jjMoveStringLiteralDfa9_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(7, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, 0L, active1);
      return 9;
   }
   switch(curChar)
   {
      case 35:
         if ((active1 & 0x40000000L) != 0L)
            return jjStopAtPos(9, 94);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, 0L, active1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   //int[] nextStates; // not used
   int startsAt = 0;
   jjnewStateCnt = 217;
   int i = 1;
   jjstateSet[0] = startState;
   //int j; // not used
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 167:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(154, 155);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(138, 139);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 10)
                        kind = 10;
                     jjCheckNAdd(137);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(135, 136);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(133, 134);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(131, 132);
                  if (curChar == 48)
                     jjCheckNAdd(202);
                  if (curChar == 48)
                     jjCheckNAdd(200);
                  if (curChar == 48)
                     jjCheckNAdd(195);
                  if (curChar == 48)
                     jjCheckNAdd(191);
                  if (curChar == 48)
                     jjCheckNAdd(189);
                  if (curChar == 48)
                     jjCheckNAdd(184);
                  if (curChar == 48)
                     jjCheckNAdd(180);
                  if (curChar == 48)
                     jjCheckNAdd(178);
                  if (curChar == 48)
                     jjCheckNAdd(173);
                  if (curChar == 48)
                     jjCheckNAdd(170);
                  if (curChar == 48)
                     jjCheckNAdd(169);
                  if (curChar == 48)
                     jjCheckNAdd(165);
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 10)
                        kind = 10;
                     jjCheckNAddStates(0, 15);
                  }
                  else if ((0x100002600L & l) != 0L)
                  {
                     if (kind > 112)
                        kind = 112;
                  }
                  else if (curChar == 47)
                     jjAddStates(16, 17);
                  else if (curChar == 45)
                     jjCheckNAddStates(18, 35);
                  else if (curChar == 36)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAddTwoStates(64, 65);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 63;
                  else if (curChar == 38)
                     jjCheckNAddTwoStates(56, 57);
                  else if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 41;
                  else if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 32;
                  if (curChar == 48)
                     jjCheckNAddStates(36, 39);
                  else if (curChar == 39)
                     jjCheckNAddStates(40, 42);
                  else if (curChar == 34)
                     jjCheckNAddStates(43, 45);
                  else if (curChar == 46)
                     jjCheckNAdd(6);
                  else if (curChar == 47)
                     jjCheckNAddTwoStates(1, 3);
                  if (curChar == 48)
                     jjCheckNAddStates(46, 53);
                  break;
               case 218:
               case 53:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(53, 54);
                  break;
               case 209:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddStates(54, 56);
                  else if (curChar == 47)
                  {
                     if (kind > 114)
                        kind = 114;
                     jjCheckNAdd(216);
                  }
                  else if (curChar == 42)
                     jjCheckNAddStates(57, 59);
                  break;
               case 56:
                  if (curChar == 36)
                  {
                     if (kind > 106)
                        kind = 106;
                     jjCheckNAddTwoStates(58, 59);
                  }
                  else if (curChar == 46)
                     jjCheckNAdd(57);
                  break;
               case 217:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAddTwoStates(64, 65);
                  }
                  else if ((0x600000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 2:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     jjCheckNAddStates(54, 56);
                  break;
               case 3:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddStates(54, 56);
                  break;
               case 4:
                  if (curChar == 47 && kind > 4)
                     kind = 4;
                  break;
               case 5:
                  if (curChar == 46)
                     jjCheckNAdd(6);
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddTwoStates(6, 7);
                  break;
               case 8:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(9);
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAdd(9);
                  break;
               case 10:
               case 12:
                  if (curChar == 34)
                     jjCheckNAddStates(43, 45);
                  break;
               case 11:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(43, 45);
                  break;
               case 14:
                  if (curChar == 34 && kind > 26)
                     kind = 26;
                  break;
               case 15:
               case 17:
                  if (curChar == 39)
                     jjCheckNAddStates(40, 42);
                  break;
               case 16:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(40, 42);
                  break;
               case 19:
                  if (curChar == 39 && kind > 27)
                     kind = 27;
                  break;
               case 21:
                  jjAddStates(60, 62);
                  break;
               case 25:
                  if (curChar == 34)
                     jjCheckNAddStates(63, 65);
                  break;
               case 26:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(63, 65);
                  break;
               case 27:
               case 29:
                  if (curChar == 34)
                     jjCheckNAdd(26);
                  break;
               case 28:
                  if (curChar == 34)
                     jjAddStates(66, 67);
                  break;
               case 30:
                  if (curChar == 34 && kind > 29)
                     kind = 29;
                  break;
               case 31:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 33:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if (curChar == 39)
                     jjCheckNAddStates(68, 70);
                  break;
               case 35:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(68, 70);
                  break;
               case 36:
               case 38:
                  if (curChar == 39)
                     jjCheckNAdd(35);
                  break;
               case 37:
                  if (curChar == 39)
                     jjAddStates(71, 72);
                  break;
               case 39:
                  if (curChar == 39 && kind > 30)
                     kind = 30;
                  break;
               case 40:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 42:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 44:
                  jjAddStates(73, 75);
                  break;
               case 55:
                  if (curChar == 38)
                     jjCheckNAddTwoStates(56, 57);
                  break;
               case 57:
                  if (curChar != 36)
                     break;
                  if (kind > 106)
                     kind = 106;
                  jjCheckNAddTwoStates(58, 59);
                  break;
               case 58:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 106)
                     kind = 106;
                  jjCheckNAddTwoStates(58, 59);
                  break;
               case 59:
                  if ((0x600000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 60:
                  if (curChar != 36)
                     break;
                  if (kind > 106)
                     kind = 106;
                  jjCheckNAddTwoStates(59, 61);
                  break;
               case 61:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 106)
                     kind = 106;
                  jjCheckNAddTwoStates(59, 61);
                  break;
               case 62:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 63:
                  if (curChar != 36)
                     break;
                  if (kind > 107)
                     kind = 107;
                  jjCheckNAddTwoStates(64, 65);
                  break;
               case 64:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 107)
                     kind = 107;
                  jjCheckNAddTwoStates(64, 65);
                  break;
               case 65:
                  if ((0x600000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 66:
                  if (curChar != 36)
                     break;
                  if (kind > 107)
                     kind = 107;
                  jjCheckNAddTwoStates(65, 67);
                  break;
               case 67:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 107)
                     kind = 107;
                  jjCheckNAddTwoStates(65, 67);
                  break;
               case 68:
                  if ((0x100002600L & l) != 0L && kind > 112)
                     kind = 112;
                  break;
               case 69:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAddStates(0, 15);
                  break;
               case 70:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 71:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 72:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 73:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 74:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 75:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 76:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 77:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 78:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 80:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 81:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 82:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 83:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 84:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 85:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 86:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 87:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(76, 78);
                  break;
               case 88:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 89;
                  break;
               case 89:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(79, 81);
                  break;
               case 91:
                  if ((0x280000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 92:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 93:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 94:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 95:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 96:
                  if ((0x3ff000000000000L & l) != 0L && kind > 1)
                     kind = 1;
                  break;
               case 97:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(82, 90);
                  break;
               case 98:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(90, 91);
                  break;
               case 99:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(91, 93);
                  break;
               case 100:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(94, 97);
                  break;
               case 101:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(98, 102);
                  break;
               case 102:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(103, 108);
                  break;
               case 103:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(109, 115);
                  break;
               case 104:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(116, 123);
                  break;
               case 105:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 106;
                  break;
               case 106:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 107;
                  break;
               case 107:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 108;
                  break;
               case 108:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 109;
                  break;
               case 109:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 110;
                  break;
               case 110:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 111;
                  break;
               case 111:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 112;
                  break;
               case 112:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 113;
                  break;
               case 113:
                  if ((0x3ff000000000000L & l) != 0L && kind > 2)
                     kind = 2;
                  break;
               case 114:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 115;
                  break;
               case 115:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 116;
                  break;
               case 116:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 117;
                  break;
               case 117:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 118;
                  break;
               case 118:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 119;
                  break;
               case 119:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 120;
                  break;
               case 120:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjstateSet[jjnewStateCnt++] = 121;
                  break;
               case 121:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 122;
                  break;
               case 122:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjstateSet[jjnewStateCnt++] = 123;
                  break;
               case 123:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjCheckNAddStates(124, 130);
                  break;
               case 124:
                  if ((0x3ff000000000000L & l) != 0L && kind > 3)
                     kind = 3;
                  break;
               case 125:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjCheckNAdd(124);
                  break;
               case 126:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjCheckNAddTwoStates(124, 125);
                  break;
               case 127:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjCheckNAddStates(131, 133);
                  break;
               case 128:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjCheckNAddStates(134, 137);
                  break;
               case 129:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjCheckNAddStates(138, 142);
                  break;
               case 130:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjCheckNAddStates(143, 148);
                  break;
               case 131:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(131, 132);
                  break;
               case 133:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(133, 134);
                  break;
               case 135:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(135, 136);
                  break;
               case 137:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAdd(137);
                  break;
               case 138:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(138, 139);
                  break;
               case 139:
                  if (curChar == 46)
                     jjCheckNAddStates(149, 152);
                  break;
               case 141:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(142);
                  break;
               case 142:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(142, 143);
                  break;
               case 144:
                  if (curChar == 46)
                     jjCheckNAdd(145);
                  break;
               case 145:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(153, 155);
                  break;
               case 147:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(148);
                  break;
               case 148:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(148, 143);
                  break;
               case 149:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(156, 161);
                  break;
               case 150:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(150, 151);
                  break;
               case 152:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(153);
                  break;
               case 153:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(153, 143);
                  break;
               case 154:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(154, 155);
                  break;
               case 155:
                  if (curChar != 46)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddTwoStates(156, 157);
                  break;
               case 156:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddTwoStates(156, 157);
                  break;
               case 158:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(159);
                  break;
               case 159:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAdd(159);
                  break;
               case 160:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(160, 161);
                  break;
               case 162:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(163);
                  break;
               case 163:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAdd(163);
                  break;
               case 164:
                  if (curChar == 45)
                     jjCheckNAddStates(18, 35);
                  break;
               case 166:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 11)
                     kind = 11;
                  jjstateSet[jjnewStateCnt++] = 166;
                  break;
               case 168:
                  if (curChar == 48)
                     jjCheckNAdd(169);
                  break;
               case 169:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAdd(169);
                  break;
               case 171:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjstateSet[jjnewStateCnt++] = 171;
                  break;
               case 172:
                  if (curChar == 48)
                     jjCheckNAdd(170);
                  break;
               case 174:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjAddStates(162, 163);
                  break;
               case 176:
                  if (curChar == 48)
                     jjCheckNAdd(173);
                  break;
               case 177:
                  if (curChar == 48)
                     jjCheckNAdd(178);
                  break;
               case 178:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(178, 179);
                  break;
               case 181:
                  if ((0x3000000000000L & l) != 0L)
                     jjAddStates(164, 165);
                  break;
               case 183:
                  if (curChar == 48)
                     jjCheckNAdd(180);
                  break;
               case 185:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjAddStates(166, 167);
                  break;
               case 187:
                  if (curChar == 48)
                     jjCheckNAdd(184);
                  break;
               case 188:
                  if (curChar == 48)
                     jjCheckNAdd(189);
                  break;
               case 189:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(189, 190);
                  break;
               case 192:
                  if ((0x3000000000000L & l) != 0L)
                     jjAddStates(168, 169);
                  break;
               case 194:
                  if (curChar == 48)
                     jjCheckNAdd(191);
                  break;
               case 196:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjAddStates(170, 171);
                  break;
               case 198:
                  if (curChar == 48)
                     jjCheckNAdd(195);
                  break;
               case 199:
                  if (curChar == 48)
                     jjCheckNAdd(200);
                  break;
               case 200:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(200, 201);
                  break;
               case 203:
                  if ((0x3000000000000L & l) != 0L)
                     jjAddStates(172, 173);
                  break;
               case 205:
                  if (curChar == 48)
                     jjCheckNAdd(202);
                  break;
               case 206:
                  if (curChar == 48)
                     jjCheckNAddStates(46, 53);
                  break;
               case 207:
                  if (curChar == 48)
                     jjCheckNAddStates(36, 39);
                  break;
               case 208:
                  if (curChar == 47)
                     jjAddStates(16, 17);
                  break;
               case 210:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddStates(57, 59);
                  break;
               case 211:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 212;
                  break;
               case 212:
                  if ((0xffff7fffffffffffL & l) != 0L)
                     jjCheckNAddStates(57, 59);
                  break;
               case 213:
                  if (curChar == 47 && kind > 113)
                     kind = 113;
                  break;
               case 214:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 213;
                  break;
               case 215:
                  if (curChar != 47)
                     break;
                  if (kind > 114)
                     kind = 114;
                  jjCheckNAdd(216);
                  break;
               case 216:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 114)
                     kind = 114;
                  jjCheckNAdd(216);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAddTwoStates(64, 65);
                  }
                  else if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 63;
                  else if (curChar == 94)
                     jjCheckNAddTwoStates(53, 54);
                  else if (curChar == 96)
                     jjstateSet[jjnewStateCnt++] = 50;
                  if (curChar == 96)
                     jjCheckNAddStates(60, 62);
                  break;
               case 218:
                  if ((0x7fffffe84000002L & l) != 0L)
                     jjCheckNAddTwoStates(53, 54);
                  else if (curChar == 91)
                  {
                     if (kind > 100)
                        kind = 100;
                  }
                  break;
               case 209:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(54, 56);
                  else if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 56:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 106)
                        kind = 106;
                     jjCheckNAddTwoStates(58, 59);
                  }
                  else if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 217:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAddTwoStates(64, 65);
                  }
                  else if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 1:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 2:
                  jjCheckNAddStates(54, 56);
                  break;
               case 3:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(54, 56);
                  break;
               case 7:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(174, 175);
                  break;
               case 11:
                  jjAddStates(43, 45);
                  break;
               case 13:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 16:
                  jjAddStates(40, 42);
                  break;
               case 18:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 20:
               case 22:
                  if (curChar == 96)
                     jjCheckNAddStates(60, 62);
                  break;
               case 21:
                  if ((0xfffffffeffffffffL & l) != 0L)
                     jjCheckNAddStates(60, 62);
                  break;
               case 23:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if (curChar == 96 && kind > 28)
                     kind = 28;
                  break;
               case 26:
                  jjAddStates(63, 65);
                  break;
               case 35:
                  jjAddStates(68, 70);
                  break;
               case 43:
                  if (curChar == 96)
                     jjCheckNAddStates(73, 75);
                  break;
               case 44:
                  if ((0xfffffffeffffffffL & l) != 0L)
                     jjCheckNAddStates(73, 75);
                  break;
               case 45:
               case 47:
                  if (curChar == 96)
                     jjCheckNAdd(44);
                  break;
               case 46:
                  if (curChar == 96)
                     jjAddStates(176, 177);
                  break;
               case 48:
                  if (curChar == 96 && kind > 31)
                     kind = 31;
                  break;
               case 49:
                  if (curChar == 96)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 50:
                  if (curChar == 96)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 51:
                  if (curChar == 96)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 52:
                  if (curChar == 94)
                     jjCheckNAddTwoStates(53, 54);
                  break;
               case 53:
                  if ((0x7fffffe84000002L & l) != 0L)
                     jjCheckNAddTwoStates(53, 54);
                  break;
               case 54:
                  if (curChar == 91 && kind > 100)
                     kind = 100;
                  break;
               case 57:
               case 58:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 106)
                     kind = 106;
                  jjCheckNAddTwoStates(58, 59);
                  break;
               case 59:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 60:
               case 61:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 106)
                     kind = 106;
                  jjCheckNAddTwoStates(59, 61);
                  break;
               case 62:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 63:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 107)
                     kind = 107;
                  jjCheckNAddTwoStates(64, 65);
                  break;
               case 64:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 107)
                     kind = 107;
                  jjCheckNAddTwoStates(64, 65);
                  break;
               case 65:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 66:
               case 67:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 107)
                     kind = 107;
                  jjCheckNAddTwoStates(65, 67);
                  break;
               case 79:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 90:
                  if (curChar == 90 && kind > 1)
                     kind = 1;
                  break;
               case 132:
                  if ((0x8000000080000L & l) != 0L && kind > 7)
                     kind = 7;
                  break;
               case 134:
                  if ((0x400000004L & l) != 0L && kind > 8)
                     kind = 8;
                  break;
               case 136:
                  if (curChar == 76 && kind > 9)
                     kind = 9;
                  break;
               case 140:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(178, 179);
                  break;
               case 143:
                  if ((0x4000000040L & l) != 0L && kind > 23)
                     kind = 23;
                  break;
               case 146:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(180, 181);
                  break;
               case 151:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(182, 183);
                  break;
               case 157:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(184, 185);
                  break;
               case 161:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(186, 187);
                  break;
               case 165:
                  if (curChar == 120)
                     jjCheckNAdd(166);
                  break;
               case 166:
                  if ((0x4200000042L & l) == 0L)
                     break;
                  if (kind > 11)
                     kind = 11;
                  jjCheckNAdd(166);
                  break;
               case 170:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 171;
                  break;
               case 173:
                  if (curChar == 120)
                     jjCheckNAdd(174);
                  break;
               case 174:
                  if ((0x4200000042L & l) != 0L)
                     jjCheckNAddTwoStates(174, 175);
                  break;
               case 175:
                  if (curChar == 76 && kind > 14)
                     kind = 14;
                  break;
               case 179:
                  if (curChar == 76 && kind > 15)
                     kind = 15;
                  break;
               case 180:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 181;
                  break;
               case 182:
                  if (curChar == 76 && kind > 16)
                     kind = 16;
                  break;
               case 184:
                  if (curChar == 120)
                     jjCheckNAdd(185);
                  break;
               case 185:
                  if ((0x4200000042L & l) != 0L)
                     jjCheckNAddTwoStates(185, 186);
                  break;
               case 186:
                  if ((0x8000000080000L & l) != 0L && kind > 17)
                     kind = 17;
                  break;
               case 190:
                  if ((0x8000000080000L & l) != 0L && kind > 18)
                     kind = 18;
                  break;
               case 191:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 192;
                  break;
               case 193:
                  if ((0x8000000080000L & l) != 0L && kind > 19)
                     kind = 19;
                  break;
               case 195:
                  if (curChar == 120)
                     jjCheckNAdd(196);
                  break;
               case 196:
                  if ((0x4200000042L & l) != 0L)
                     jjCheckNAddTwoStates(196, 197);
                  break;
               case 197:
                  if ((0x400000004L & l) != 0L && kind > 20)
                     kind = 20;
                  break;
               case 201:
                  if ((0x400000004L & l) != 0L && kind > 21)
                     kind = 21;
                  break;
               case 202:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 203;
                  break;
               case 204:
                  if ((0x400000004L & l) != 0L && kind > 22)
                     kind = 22;
                  break;
               case 210:
               case 212:
                  jjCheckNAddStates(57, 59);
                  break;
               case 216:
                  if (kind > 114)
                     kind = 114;
                  jjstateSet[jjnewStateCnt++] = 216;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 209:
               case 3:
               case 2:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(54, 56);
                  break;
               case 11:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(43, 45);
                  break;
               case 16:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(40, 42);
                  break;
               case 21:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(60, 62);
                  break;
               case 26:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(63, 65);
                  break;
               case 35:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(68, 70);
                  break;
               case 44:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(73, 75);
                  break;
               case 210:
               case 212:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(57, 59);
                  break;
               case 216:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 114)
                     kind = 114;
                  jjstateSet[jjnewStateCnt++] = 216;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 217 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_1(int pos, long active0, long active1)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0, long active1)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0, active1), pos + 1);
}
private int jjStartNfaWithStates_1(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_1(state, pos + 1);
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 93:
         return jjStopAtPos(0, 110);
      default :
         return jjMoveNfa_1(0, 0);
   }
}
private int jjMoveNfa_1(int startState, int curPos)
{
   //int[] nextStates; // not used
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   //int j; // not used
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  kind = 111;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffffffdfffffffL & l) != 0L)
                     kind = 111;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 111)
                     kind = 111;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   70, 105, 114, 131, 132, 133, 134, 135, 136, 137, 138, 139, 154, 155, 160, 161, 
   209, 215, 131, 133, 135, 137, 167, 168, 172, 176, 177, 183, 187, 188, 194, 198, 
   199, 205, 138, 154, 169, 178, 189, 200, 16, 18, 19, 11, 13, 14, 165, 170, 
   173, 180, 184, 191, 195, 202, 1, 3, 4, 210, 211, 214, 21, 23, 24, 26, 
   27, 28, 29, 31, 35, 36, 37, 38, 40, 44, 45, 46, 88, 90, 91, 90, 
   91, 97, 98, 90, 91, 99, 100, 101, 102, 103, 104, 98, 90, 91, 98, 90, 
   91, 99, 98, 90, 91, 99, 100, 98, 90, 91, 99, 100, 101, 98, 90, 91, 
   99, 100, 101, 102, 98, 90, 91, 99, 100, 101, 102, 103, 124, 125, 126, 127, 
   128, 129, 130, 124, 125, 126, 124, 125, 126, 127, 124, 125, 126, 127, 128, 124, 
   125, 126, 127, 128, 129, 140, 144, 143, 149, 145, 146, 143, 140, 144, 150, 151, 
   143, 149, 174, 175, 181, 182, 185, 186, 192, 193, 196, 197, 203, 204, 8, 9, 
   47, 49, 141, 142, 147, 148, 152, 153, 158, 159, 162, 163, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default : 
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, "\173", "\175", null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, "\164\162\165\145", "\146\141\154\163\145", 
"\156\165\154\154", "\50", "\51", "\133", "\135", "\72", "\53", "\53\53", "\53\53\53", "\55", 
"\55\55", "\55\55\55", "\52", "\52\52", "\52\52\52", "\57", "\57\57\57", "\136", 
"\136\136", "\136\136\136", "\45", "\45\45", "\45\45\45", "\75", "\75\75", "\75\75\75", 
"\176", "\176\176", "\176\176\176", "\74", "\74\74", "\74\74\74", "\76", "\76\76", 
"\76\76\76", "\74\75", "\76\75", "\72\75", "\72\75\75", "\55\76", "\55\55\76", "\75\76", 
"\75\75\76", "\74\55\55", "\74\75\75", "\174", "\174\174", "\174\174\174", "\46", "\46\46", 
"\46\46\46", "\43", "\43\43", "\43\43\43", "\43\43\43\43", "\43\43\43\43\43", 
"\43\43\43\43\43\43", "\43\43\43\43\43\43\43", "\43\43\43\43\43\43\43\43", 
"\43\43\43\43\43\43\43\43\43", "\43\43\43\43\43\43\43\43\43\43", "\73", "\73\73", "\54", "\100", "\100\100", 
null, "\116\141\116", "\53\111\156\146", "\55\111\156\146", 
"\53\102\157\165\156\144", "\55\102\157\165\156\144", null, null, null, null, "\135", null, null, null, 
null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT", 
   "IN_CHARSTREAM", 
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffffffdffffffL, 0xcfffffffffffL, 
};
static final long[] jjtoSkip = {
   0x0L, 0x7000000000000L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[217];
private final int[] jjstateSet = new int[434];
StringBuffer image;
int jjimageLen;
int lengthOfMatch;
protected char curChar;
/** Constructor. */
public TsonStreamParserImplTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public TsonStreamParserImplTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 217; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String tokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   tokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, tokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  //int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   switch(curLexState)
   {
     case 0:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
           SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 113 :
         if (image == null)
            image = new StringBuffer();
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    CommentsHelper.onComments(image.toString());
         break;
      case 114 :
         if (image == null)
            image = new StringBuffer();
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    CommentsHelper.onComments(image.toString());
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
