options {
    STATIC = false ;
    UNICODE_INPUT=true;
}

PARSER_BEGIN(TsonStreamParserImpl)
package net.thevpc.tson.impl.parser.javacc;
import net.thevpc.tson.impl.parser.*;
import net.thevpc.tson.impl.elements.*;
import net.thevpc.tson.*;

public class TsonStreamParserImpl implements ITsonStreamParser{
    private TsonStreamParserImplConfig config;
    private TsonParserVisitor visitor;
    private Object source;

    public Object source(){
        return source;
    }
    public void source(Object source){
        this.source=source;
    }
    public void setConfig(TsonStreamParserImplConfig c){
        this.config=c;
        this.visitor=config.getVisitor();
    }

    private String prepareComments(String comments){
        if(!config.isRawComments()){
            return TsonParserUtils.escapeComments(comments);
        }
        return comments;
    }
}

PARSER_END(TsonStreamParserImpl)

public void parseDocument():
{
}
{
    parseElement() {
        visitor.visitDocumentEnd();
    }
}
public void parseElement():
{
}
{
  elementLevel2()
  |
  <EOF>

}

void elementLevel2() :
{
visitor.visitInstructionStart();
boolean simple=true;
Token t ;
}
{
    (
    elementLevel1()
    (t=op() elementLevel1() {simple=false;visitor.visitBinOpEnd(t.image);})?
    ){
        if(simple){
            visitor.visitSimpleEnd();
        }
    }

}


Token op() :
{
        Token t;
}{
   (( t=< COLON >
|    t=< OP_PLUS >
|    t=< OP_PLUS2 >
|    t=< OP_PLUS3 >
|    t=< OP_MINUS >
|    t=< OP_MINUS2 >
|    t=< OP_MINUS3 >
|    t=< OP_MUL >
|    t=< OP_MUL2 >
|    t=< OP_MUL3 >
|    t=< OP_DIV >
|    t=< OP_DIV3 >
|    t=< OP_HAT >
|    t=< OP_HAT2 >
|    t=< OP_HAT3 >
|    t=< OP_REM >
|    t=< OP_REM2 >
|    t=< OP_REM3 >
|    t=< OP_EQ >
|    t=< OP_EQ2 >
|    t=< OP_EQ3 >
|    t=< OP_TILDE >
|    t=< OP_TILDE2 >
|    t=< OP_TILDE3 >
|    t=< OP_LT >
|    t=< OP_LT2 >
|    t=< OP_LT3 >
|    t=< OP_GT >
|    t=< OP_GT2 >
|    t=< OP_GT3 >
|    t=< OP_LTE >
|    t=< OP_GTE >
|    t=< OP_ASSIGN >
|    t=< OP_ASSIGN_EQ >
|    t=< OP_MINUS_GT >
|    t=< OP_MINUS2_GT >
|    t=< OP_EQ_GT >
|    t=< OP_EQ2_GT >
|    t=< OP_LT_MINUS2 >
|    t=< OP_LT_EQ2 >
|    t=< OP_PIPE >
|    t=< OP_PIPE2 >
|    t=< OP_PIPE3 >
|    t=< OP_AND  >
|    t=< OP_AND2  >
|    t=< OP_AND3  >
|    t=< OP_HASH  >
|    t=< OP_HASH2  >
|    t=< OP_HASH3  >
|    t=< OP_HASH4  >
|    t=< OP_HASH5  >
|    t=< OP_HASH6  >
|    t=< OP_HASH7  >
|    t=< OP_HASH8  >
|    t=< OP_HASH9  >
|    t=< OP_HASH10 >
|    t=< AT >
|    t=< AT2 >))
 {
    return t;
  }
}




void elementLevel1() :
{
    net.thevpc.tson.impl.parser.javacc.Token comments=null;
    visitor.visitElementStart();
    Token typeName=null;
}
{
    (comments=<COMMENT> {
            if(!config.isSkipComments()) {
            visitor.visitComments(prepareComments(comments.image));
            }
})*
    (annotation())*
    (
    <NULL> { visitor.visitPrimitiveEnd(TsonNullImpl.INSTANCE);}
    | <TRUE>{ visitor.visitPrimitiveEnd(TsonBooleanImpl.TRUE);}
    |<FALSE>{  visitor.visitPrimitiveEnd(TsonBooleanImpl.FALSE);}
    |<DATETIME> {  visitor.visitPrimitiveEnd(TsonParserUtils.parseDateTimeElem(token.image));}
    |<DATE> {  visitor.visitPrimitiveEnd(TsonParserUtils.parseDateElem(token.image));}
    |<TIME> {  visitor.visitPrimitiveEnd(TsonParserUtils.parseTimeElem(token.image));}
    |<REGEX> {  visitor.visitPrimitiveEnd(TsonParserUtils.parseRegexElem(token.image));}
    |<BYTE>{ visitor.visitPrimitiveEnd(TsonParserUtils.parseByteElem(token.image));}
    |<SHORT>{  visitor.visitPrimitiveEnd(TsonParserUtils.parseShortElem(token.image));}
    |<LONG>{  visitor.visitPrimitiveEnd(TsonParserUtils.parseLongElem(token.image));}
    |<INTEGER>{ visitor.visitPrimitiveEnd(TsonParserUtils.parseIntElem(token.image));}

    |<BYTE_B>{ visitor.visitPrimitiveEnd(TsonParserUtils.parseByteElemBin(token.image));}
    |<BYTE_O>{ visitor.visitPrimitiveEnd(TsonParserUtils.parseByteElemOctal(token.image));}
    |<BYTE_H>{ visitor.visitPrimitiveEnd(TsonParserUtils.parseByteElemHex(token.image));}

    |<SHORT_B>{ visitor.visitPrimitiveEnd(TsonParserUtils.parseShortElemBin(token.image));}
    |<SHORT_O>{ visitor.visitPrimitiveEnd(TsonParserUtils.parseShortElemOctal(token.image));}
    |<SHORT_H>{ visitor.visitPrimitiveEnd(TsonParserUtils.parseShortElemHex(token.image));}

    |<INTEGER_B>{ visitor.visitPrimitiveEnd(TsonParserUtils.parseIntElemBin(token.image));}
    |<INTEGER_O>{ visitor.visitPrimitiveEnd(TsonParserUtils.parseIntElemOctal(token.image));}
    |<INTEGER_H>{ visitor.visitPrimitiveEnd(TsonParserUtils.parseIntElemHex(token.image));}


    |<LONG_B>{ visitor.visitPrimitiveEnd(TsonParserUtils.parseLongElemBin(token.image));}
    |<LONG_O>{ visitor.visitPrimitiveEnd(TsonParserUtils.parseLongElemOctal(token.image));}
    |<LONG_H>{ visitor.visitPrimitiveEnd(TsonParserUtils.parseLongElemHex(token.image));}

    |<FLOAT>{  visitor.visitPrimitiveEnd(TsonParserUtils.parseFloatElem(token.image));}
    |<DOUBLE>{ visitor.visitPrimitiveEnd(TsonParserUtils.parseDoubleElem(token.image));}
    |<SINGLE_QUOTE_STR> {  visitor.visitPrimitiveEnd(TsonParserUtils.parseCharElem(token.image));}
    |<DOUBLE_QUOTE_STR> {  visitor.visitPrimitiveEnd(TsonParserUtils.parseStringElem(token.image));}
    |<ANTI_QUOTE_STR> {  visitor.visitPrimitiveEnd(TsonParserUtils.parseStringElem(token.image,TsonStringLayout.ANTI_QUOTE));}
    |<TRIPLE_DOUBLE_QUOTE_STR> {  visitor.visitPrimitiveEnd(TsonParserUtils.parseStringElem(token.image,TsonStringLayout.TRIPLE_DOUBLE_QUOTE));}
    |<TRIPLE_SINGLE_QUOTE_STR> {  visitor.visitPrimitiveEnd(TsonParserUtils.parseStringElem(token.image,TsonStringLayout.TRIPLE_SINGLE_QUOTE));}
    |<TRIPLE_ANTI_QUOTE_STR> {  visitor.visitPrimitiveEnd(TsonParserUtils.parseStringElem(token.image,TsonStringLayout.TRIPLE_ANTI_QUOTE));}
    | <NAN> [ <LPAREN>typeName=<NAME><RPAREN>] {visitor.visitPrimitiveEnd(TsonParserUtils.parseNaNElem(token==null?null:token.image));}
    | <POS_INF> [ <LPAREN>typeName=<NAME><RPAREN>] {visitor.visitPrimitiveEnd(TsonParserUtils.parsePosInfElem(token==null?null:token.image));}
    | <NEG_INF> [ <LPAREN>typeName=<NAME><RPAREN>] {visitor.visitPrimitiveEnd(TsonParserUtils.parseNegInfElem(token==null?null:token.image));}
    | <POS_BOUND> [ <LPAREN>typeName=<NAME><RPAREN>] {visitor.visitPrimitiveEnd(TsonParserUtils.parsePosBoundElem(token==null?null:token.image));}
    | <NEG_BOUND> [ <LPAREN>typeName=<NAME><RPAREN>] {visitor.visitPrimitiveEnd(TsonParserUtils.parseNegBoundElem(token==null?null:token.image));}
    | bin()
    | object(false)
    | array(false)
    | named()
    | unnamed()
   )
}

void annotation() :
{
  Token id=null;
}
{
    <AT> [id=<NAME>]
    {
        visitor.visitAnnotationStart(id==null?null:id.image);
    }
    (
    <LPAREN>
    (<RPAREN>
         |
         (annotationParamList()
         <RPAREN>)
    )
    )?
    {
         visitor.visitAnnotationEnd();
    }
}

void bin() :
{
    InputStreamTsonBinaryStreamSource bin=new InputStreamTsonBinaryStreamSource();
}
{
<CHARSTREAM_START>
{
    bin.pushBase64(token.image);
}
<CHARSTREAM_END>
{
    visitor.visitPrimitiveEnd(new TsonBinaryStreamImpl(bin));
}
}


void named() :
{
  Token id;
    boolean hasPars=false;
    boolean hasArr=false;
    boolean hasObj=false;
}
{
    (id=<NAME>
    {
        visitor.visitNamedStart(id.image);
    })
    (
      (unnamed0(){hasPars=true;}) ?
    )
    (
        (array( true){hasArr=true;})
        |(object(true){hasObj=true;})
    )?
    {
        if(!hasArr && !hasObj){
            if(!hasPars){
                visitor.visitPrimitiveEnd(Tson.name(id.image));
            }else {
                visitor.visitFunctionEnd();
            }
        }
    }
}

void param() :
{
    visitor.visitParamElementStart();
}
{
    elementLevel2()
    {
        visitor.visitParamElementEnd();
    }
}

void unnamed() :
{
    boolean hasArr=false;
    boolean hasObj=false;
}
{
    unnamed0()
    (
         (array(true){hasArr=true;})
       | (object(true){hasObj=true;})
    )?
    {
    if(!hasArr && !hasObj){
            visitor.visitUpletEnd();
    }
}
}

void unnamed0() :
{
}
{
    (<LPAREN>
    {
    visitor.visitParamsStart(); }
    (
            <RPAREN>
            |
            (
            param()(<COMMA> param()) *
            <RPAREN>
            )
            )
    {visitor.visitParamsEnd(); }
    )
}

void objectElement() :
{
    visitor.visitObjectElementStart();
}
{
    elementLevel2()
    {
        visitor.visitObjectElementEnd();
    }
}

void arrayElement() :
{
    visitor.visitArrayElementStart();
}
{
    elementLevel2()
    {
        visitor.visitArrayElementEnd();
    }
}

void commaSeparator() :
{
}
{
        <COMMA>{
            visitor.listSeparator();
        }

}

void objectElementList() :
{
}
{
    (objectElement()|commaSeparator())*
}

void arrayElementList() :
{
}
{
    (arrayElement() | commaSeparator())*
}

void annotationParamList() :
{
}
{
    (annotationParam() | commaSeparator())*
}

void object(boolean named) :
{
}
{
    <LBRACE> {
        if(named){
            visitor.visitNamedObjectStart();
        }else{
            visitor.visitObjectStart();
        }
    }

    (
        <RBRACE>
        |
        (  objectElementList()
        <RBRACE>
        )
        )
        {
            if(named){
                visitor.visitNamedObjectEnd();
            }else{
                visitor.visitObjectEnd();
            }
        }
}

void array(boolean named) :
{
}
{
    <LBRACK>
    {
        if(named){
           visitor.visitNamedArrayStart();
        }else{
            visitor.visitArrayStart();
        }
    }
    (
    <RBRACK>
    |
    ( arrayElementList()
    <RBRACK>
    )
    )
    {
         if(named){
              visitor.visitNamedArrayEnd();
         }else{
            visitor.visitArrayEnd();
         }
    }
}

void annotationParam() :
{
  visitor.visitAnnotationParamStart();
}
{
  elementLevel2()
  {
    visitor.visitAnnotationParamEnd();
  }
}


<DEFAULT> TOKEN :
{
    < DATETIME : (
                (<DIGIT>){4} "-" (<DIGIT>){2} "-" (<DIGIT>){2}
                ["T"](<DIGIT>){2} ":" (<DIGIT>){2} ":" (<DIGIT>){2} ("." (<DIGIT>){1,9})? ("Z" | ["+","-"](<DIGIT>){2} ":" (<DIGIT>){2})
               )
               >
|    < DATE : (
                ((<DIGIT>)){4} "-" ((<DIGIT>)){2} "-" (<DIGIT>){2}
               )
               >
|    < TIME : (
                ((<DIGIT>)){2} ":" ((<DIGIT>)){2} ":" ((<DIGIT>)){2} ("." ((<DIGIT>)){1,9})?
               )
               >
|    < REGEX : "/" ((["\\"] ~["\n"])| (~["*" , "/", "\\"]))*  "/" >
|     < LBRACE : "{" >
|    < RBRACE: "}" >
|    < SHORT: ("-")?<DIGIT> (<DIGIT>)* ("s"|"S") >
|    < BYTE: ("-")?<DIGIT> (<DIGIT>)* ("b"|"B") >
|    < LONG: ("-")?<DIGIT> (<DIGIT>)* ("L") >
|    < INTEGER: ("-")?<DIGIT> (<DIGIT>)*>
|    < INTEGER_H: ("-")?"0x" (["0"-"9","A","F","a","f"])+>
|    < INTEGER_O: ("-")?"0" (["0"-"7"])+>
|    < INTEGER_B: ("-")?"0b" (["0"-"1"])+>

|    < LONG_H: ("-")?"0x" (["0"-"9","A","F","a","f"])+ "L">
|    < LONG_O: ("-")?"0" (["0"-"7"])+  "L">
|    < LONG_B: ("-")?"0b" (["0"-"1"])+  "L">

|    < SHORT_H: ("-")?"0x" (["0"-"9","A","F","a","f"])+ ["s","S"]>
|    < SHORT_O: ("-")?"0" (["0"-"7"])+  ["s","S"]>
|    < SHORT_B: ("-")?"0b" (["0"-"1"])+  ["s","S"]>

|    < BYTE_H: ("-")?"0x" (["0"-"9","A","F","a","f"])+ ["b","B"]>
|    < BYTE_O: ("-")?"0" (["0"-"7"])+  ["b","B"]>
|    < BYTE_B: ("-")?"0b" (["0"-"1"])+  ["b","B"]>

|    < FLOAT: ("-")?(<DIGIT>)+ "." (<DIGIT>)*
        (  (<EXPONENT>)?
        | "." (<DIGIT>)+ (<EXPONENT>)?
        | (<DIGIT>)+ <EXPONENT>) ("f"|"F")
     >
|    < DOUBLE: ("-")?(<DIGIT>)+ "." (<DIGIT>)* (<EXPONENT>)?
        | "." (<DIGIT>)+ (<EXPONENT>)?
        | (<DIGIT>)+ <EXPONENT>
     >
|    < #EXPONENT: ["e","E"] (["+","-"])? (<DIGIT>)+ >
|    < DOUBLE_QUOTE_STR: "\""  (~["\""] | "\\\"")*  "\"">
|    < SINGLE_QUOTE_STR: "'"  (~["'"] | "\\'")*  "'">
|    < ANTI_QUOTE_STR : "`"  (~["`"] | "\\`")*  "`" >
|    < TRIPLE_DOUBLE_QUOTE_STR : "\"\"\""  (~["\""] | ("\"" ~["\""]) | ("\"\"" ~["\""]))*  "\"\"\"" >
|    < TRIPLE_SINGLE_QUOTE_STR : "'''"  (~["'"] | ("'" ~["'"]) | ("''" ~["'"]))*  "'''" >
|    < TRIPLE_ANTI_QUOTE_STR : "```"  (~["`"] | ("`" ~["`"]) | ("``" ~["`"]))*  "```" >
|    < TRUE : "true" >
|    < FALSE : "false" >
|    < NULL : "null" >
//|    < DOT : "." >
|    < LPAREN : "(" >
|    < RPAREN : ")" >
|    < LBRACK : "[" >
|    < RBRACK : "]" >
|    < COLON : ":" >
|    < OP_PLUS : "+" >
|    < OP_PLUS2 : "++" >
|    < OP_PLUS3 : "+++" >
|    < OP_MINUS : "-" >
|    < OP_MINUS2 : "--" >
|    < OP_MINUS3 : "---" >
|    < OP_MUL : "*" >
|    < OP_MUL2 : "**" >
|    < OP_MUL3 : "***" >
|    < OP_DIV : "/" >
|    < OP_DIV3 : "///" >
|    < OP_HAT : "^" >
|    < OP_HAT2 : "^^" >
|    < OP_HAT3 : "^^^" >
|    < OP_REM : "%" >
|    < OP_REM2 : "%%" >
|    < OP_REM3 : "%%%" >
|    < OP_EQ : "=" >
|    < OP_EQ2 : "==" >
|    < OP_EQ3 : "===" >
|    < OP_TILDE : "~" >
|    < OP_TILDE2 : "~~" >
|    < OP_TILDE3 : "~~~" >
|    < OP_LT : "<" >
|    < OP_LT2 : "<<" >
|    < OP_LT3 : "<<<" >
|    < OP_GT : ">" >
|    < OP_GT2 : ">>" >
|    < OP_GT3 : ">>>" >
|    < OP_LTE : "<=" >
|    < OP_GTE : ">=" >
|    < OP_ASSIGN : ":=" >
|    < OP_ASSIGN_EQ : ":==" >
|    < OP_MINUS_GT : "->" >
|    < OP_MINUS2_GT : "-->" >
|    < OP_EQ_GT : "=>" >
|    < OP_EQ2_GT : "==>" >
|    < OP_LT_MINUS2 : "<--" >
|    < OP_LT_EQ2 : "<==" >
|    < OP_PIPE : "|" >
|    < OP_PIPE2 : "||" >
|    < OP_PIPE3 : "|||" >
|    < OP_AND : "&" >
|    < OP_AND2 : "&&" >
|    < OP_AND3 : "&&&" >
|    < OP_HASH : "#" >
|    < OP_HASH2 : "##" >
|    < OP_HASH3 : "###" >
|    < OP_HASH4 : "####" >
|    < OP_HASH5 : "#####" >
|    < OP_HASH6 : "######" >
|    < OP_HASH7 : "#######" >
|    < OP_HASH8 : "########" >
|    < OP_HASH9 : "#########" >
|    < OP_HASH10 : "##########" >
|    < SEMICOLON : ";" >
|    < SEMICOLON2 : ";;" >
|    < COMMA : "," >
|    < AT : "@" >
|    < AT2 : "@@" >
|    < CHARSTREAM_START : "^" (["a"-"z","A","Z","_","0"-"9"])* "[" > : IN_CHARSTREAM

|    < NAN   : "NaN">
|    < POS_INF   : "+Inf">
|    < NEG_INF   : "-Inf">
|    < POS_BOUND   : "+Bound">
|    < NEG_BOUND   : "-Bound">
|    < COMMENT : "/*"  (~["*"] | ("*" ~["/"]))*  "*/" >
|    < ALIAS : "&" <NAME> >
|    < NAME : (("."|"_")?(<LETTER>) (<LETTER>| <DIGIT>) *) (("."|"-"|"_") ((<LETTER>) (<LETTER>| <DIGIT>) *))* >
|    < #LETTER:
        ["a"-"z","A"-"Z","$"]
    >
|    < #DIGIT:
        ["0"-"9"]
     >
}

<IN_CHARSTREAM> TOKEN:{
      < CHARSTREAM_END : "]" > : DEFAULT
    | < CHARSTREAM_PART : (~["]"]) >
}

SKIP : {
 " "
|  "\t"
|  "\n"
|  "\r"
}
