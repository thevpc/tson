/* Generated By:JavaCC: Do not edit this line. TsonStreamParserImplConstants.java */
package net.thevpc.tson.impl.parser.javacc;


/** 
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface TsonStreamParserImplConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int DATETIME = 1;
  /** RegularExpression Id. */
  int DATE = 2;
  /** RegularExpression Id. */
  int TIME = 3;
  /** RegularExpression Id. */
  int REGEX = 4;
  /** RegularExpression Id. */
  int LBRACE = 5;
  /** RegularExpression Id. */
  int RBRACE = 6;
  /** RegularExpression Id. */
  int SHORT = 7;
  /** RegularExpression Id. */
  int BYTE = 8;
  /** RegularExpression Id. */
  int LONG = 9;
  /** RegularExpression Id. */
  int INTEGER = 10;
  /** RegularExpression Id. */
  int INTEGER_H = 11;
  /** RegularExpression Id. */
  int INTEGER_O = 12;
  /** RegularExpression Id. */
  int INTEGER_B = 13;
  /** RegularExpression Id. */
  int LONG_H = 14;
  /** RegularExpression Id. */
  int LONG_O = 15;
  /** RegularExpression Id. */
  int LONG_B = 16;
  /** RegularExpression Id. */
  int SHORT_H = 17;
  /** RegularExpression Id. */
  int SHORT_O = 18;
  /** RegularExpression Id. */
  int SHORT_B = 19;
  /** RegularExpression Id. */
  int BYTE_H = 20;
  /** RegularExpression Id. */
  int BYTE_O = 21;
  /** RegularExpression Id. */
  int BYTE_B = 22;
  /** RegularExpression Id. */
  int FLOAT = 23;
  /** RegularExpression Id. */
  int DOUBLE = 24;
  /** RegularExpression Id. */
  int EXPONENT = 25;
  /** RegularExpression Id. */
  int STRING = 26;
  /** RegularExpression Id. */
  int CHARACTER = 27;
  /** RegularExpression Id. */
  int TRUE = 28;
  /** RegularExpression Id. */
  int FALSE = 29;
  /** RegularExpression Id. */
  int NULL = 30;
  /** RegularExpression Id. */
  int LPAREN = 31;
  /** RegularExpression Id. */
  int RPAREN = 32;
  /** RegularExpression Id. */
  int LBRACK = 33;
  /** RegularExpression Id. */
  int RBRACK = 34;
  /** RegularExpression Id. */
  int COLON = 35;
  /** RegularExpression Id. */
  int OP_PLUS = 36;
  /** RegularExpression Id. */
  int OP_PLUS2 = 37;
  /** RegularExpression Id. */
  int OP_PLUS3 = 38;
  /** RegularExpression Id. */
  int OP_MINUS = 39;
  /** RegularExpression Id. */
  int OP_MINUS2 = 40;
  /** RegularExpression Id. */
  int OP_MINUS3 = 41;
  /** RegularExpression Id. */
  int OP_MUL = 42;
  /** RegularExpression Id. */
  int OP_MUL2 = 43;
  /** RegularExpression Id. */
  int OP_MUL3 = 44;
  /** RegularExpression Id. */
  int OP_DIV = 45;
  /** RegularExpression Id. */
  int OP_DIV3 = 46;
  /** RegularExpression Id. */
  int OP_HAT = 47;
  /** RegularExpression Id. */
  int OP_HAT2 = 48;
  /** RegularExpression Id. */
  int OP_HAT3 = 49;
  /** RegularExpression Id. */
  int OP_REM = 50;
  /** RegularExpression Id. */
  int OP_REM2 = 51;
  /** RegularExpression Id. */
  int OP_REM3 = 52;
  /** RegularExpression Id. */
  int OP_EQ = 53;
  /** RegularExpression Id. */
  int OP_EQ2 = 54;
  /** RegularExpression Id. */
  int OP_EQ3 = 55;
  /** RegularExpression Id. */
  int OP_TILDE = 56;
  /** RegularExpression Id. */
  int OP_TILDE2 = 57;
  /** RegularExpression Id. */
  int OP_TILDE3 = 58;
  /** RegularExpression Id. */
  int OP_LT = 59;
  /** RegularExpression Id. */
  int OP_LT2 = 60;
  /** RegularExpression Id. */
  int OP_LT3 = 61;
  /** RegularExpression Id. */
  int OP_GT = 62;
  /** RegularExpression Id. */
  int OP_GT2 = 63;
  /** RegularExpression Id. */
  int OP_GT3 = 64;
  /** RegularExpression Id. */
  int OP_LTE = 65;
  /** RegularExpression Id. */
  int OP_GTE = 66;
  /** RegularExpression Id. */
  int OP_ASSIGN = 67;
  /** RegularExpression Id. */
  int OP_ASSIGN_EQ = 68;
  /** RegularExpression Id. */
  int OP_MINUS_GT = 69;
  /** RegularExpression Id. */
  int OP_MINUS2_GT = 70;
  /** RegularExpression Id. */
  int OP_EQ_GT = 71;
  /** RegularExpression Id. */
  int OP_EQ2_GT = 72;
  /** RegularExpression Id. */
  int OP_LT_MINUS2 = 73;
  /** RegularExpression Id. */
  int OP_LT_EQ2 = 74;
  /** RegularExpression Id. */
  int OP_PIPE = 75;
  /** RegularExpression Id. */
  int OP_PIPE2 = 76;
  /** RegularExpression Id. */
  int OP_PIPE3 = 77;
  /** RegularExpression Id. */
  int OP_AND = 78;
  /** RegularExpression Id. */
  int OP_AND2 = 79;
  /** RegularExpression Id. */
  int OP_AND3 = 80;
  /** RegularExpression Id. */
  int OP_HASH = 81;
  /** RegularExpression Id. */
  int OP_HASH2 = 82;
  /** RegularExpression Id. */
  int OP_HASH3 = 83;
  /** RegularExpression Id. */
  int OP_HASH4 = 84;
  /** RegularExpression Id. */
  int OP_HASH5 = 85;
  /** RegularExpression Id. */
  int OP_HASH6 = 86;
  /** RegularExpression Id. */
  int OP_HASH7 = 87;
  /** RegularExpression Id. */
  int OP_HASH8 = 88;
  /** RegularExpression Id. */
  int OP_HASH9 = 89;
  /** RegularExpression Id. */
  int OP_HASH10 = 90;
  /** RegularExpression Id. */
  int SEMICOLON = 91;
  /** RegularExpression Id. */
  int SEMICOLON2 = 92;
  /** RegularExpression Id. */
  int COMMA = 93;
  /** RegularExpression Id. */
  int AT = 94;
  /** RegularExpression Id. */
  int AT2 = 95;
  /** RegularExpression Id. */
  int CHARSTREAM_START = 96;
  /** RegularExpression Id. */
  int NAN = 97;
  /** RegularExpression Id. */
  int POS_INF = 98;
  /** RegularExpression Id. */
  int NEG_INF = 99;
  /** RegularExpression Id. */
  int POS_BOUND = 100;
  /** RegularExpression Id. */
  int NEG_BOUND = 101;
  /** RegularExpression Id. */
  int COMMENT = 102;
  /** RegularExpression Id. */
  int MULTILINE_STR = 103;
  /** RegularExpression Id. */
  int ALIAS = 104;
  /** RegularExpression Id. */
  int NAME = 105;
  /** RegularExpression Id. */
  int LETTER = 106;
  /** RegularExpression Id. */
  int DIGIT = 107;
  /** RegularExpression Id. */
  int CHARSTREAM_END = 108;
  /** RegularExpression Id. */
  int CHARSTREAM_PART = 109;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_CHARSTREAM = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<DATETIME>",
    "<DATE>",
    "<TIME>",
    "<REGEX>",
    "\"{\"",
    "\"}\"",
    "<SHORT>",
    "<BYTE>",
    "<LONG>",
    "<INTEGER>",
    "<INTEGER_H>",
    "<INTEGER_O>",
    "<INTEGER_B>",
    "<LONG_H>",
    "<LONG_O>",
    "<LONG_B>",
    "<SHORT_H>",
    "<SHORT_O>",
    "<SHORT_B>",
    "<BYTE_H>",
    "<BYTE_O>",
    "<BYTE_B>",
    "<FLOAT>",
    "<DOUBLE>",
    "<EXPONENT>",
    "<STRING>",
    "<CHARACTER>",
    "\"true\"",
    "\"false\"",
    "\"null\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\":\"",
    "\"+\"",
    "\"++\"",
    "\"+++\"",
    "\"-\"",
    "\"--\"",
    "\"---\"",
    "\"*\"",
    "\"**\"",
    "\"***\"",
    "\"/\"",
    "\"///\"",
    "\"^\"",
    "\"^^\"",
    "\"^^^\"",
    "\"%\"",
    "\"%%\"",
    "\"%%%\"",
    "\"=\"",
    "\"==\"",
    "\"===\"",
    "\"~\"",
    "\"~~\"",
    "\"~~~\"",
    "\"<\"",
    "\"<<\"",
    "\"<<<\"",
    "\">\"",
    "\">>\"",
    "\">>>\"",
    "\"<=\"",
    "\">=\"",
    "\":=\"",
    "\":==\"",
    "\"->\"",
    "\"-->\"",
    "\"=>\"",
    "\"==>\"",
    "\"<--\"",
    "\"<==\"",
    "\"|\"",
    "\"||\"",
    "\"|||\"",
    "\"&\"",
    "\"&&\"",
    "\"&&&\"",
    "\"#\"",
    "\"##\"",
    "\"###\"",
    "\"####\"",
    "\"#####\"",
    "\"######\"",
    "\"#######\"",
    "\"########\"",
    "\"#########\"",
    "\"##########\"",
    "\";\"",
    "\";;\"",
    "\",\"",
    "\"@\"",
    "\"@@\"",
    "<CHARSTREAM_START>",
    "\"NaN\"",
    "\"+Inf\"",
    "\"-Inf\"",
    "\"+Bound\"",
    "\"-Bound\"",
    "<COMMENT>",
    "<MULTILINE_STR>",
    "<ALIAS>",
    "<NAME>",
    "<LETTER>",
    "<DIGIT>",
    "\"]\"",
    "<CHARSTREAM_PART>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
  };

}
